-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity radix_sort_separate_bucket_parallel_2_input_bucket_1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    sorted_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sorted_data_ce0 : OUT STD_LOGIC;
    sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_ce0 : OUT STD_LOGIC;
    bucket_we0 : OUT STD_LOGIC;
    bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer_ce0 : OUT STD_LOGIC;
    bucket_pointer_we0 : OUT STD_LOGIC;
    bucket_pointer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of radix_sort_separate_bucket_parallel_2_input_bucket_1_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln11_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sorted_data_load_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ith_radix_fu_140_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ith_radix_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal bucket_pointer_addr_reg_211 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln11_1_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_44 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_124_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul_fu_93_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shifted_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal grp_fu_167_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component radix_sort_separate_bucket_parallel_2_mac_muladd_4ns_5ns_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    mac_muladd_4ns_5ns_9ns_9_4_1_U5 : component radix_sort_separate_bucket_parallel_2_mac_muladd_4ns_5ns_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_167_p0,
        din1 => grp_fu_167_p1,
        din2 => grp_fu_167_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln11_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_44 <= ap_const_lv5_0;
            elsif (((icmp_ln11_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_44 <= add_ln11_fu_124_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bucket_pointer_addr_reg_211 <= zext_ln14_fu_148_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ith_radix_reg_201 <= ith_radix_fu_140_p1;
                sorted_data_load_reg_196 <= sorted_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln11_reg_183(4 downto 2) <= zext_ln11_fu_101_p1(4 downto 2);
            end if;
        end if;
    end process;
    zext_ln11_reg_183(1 downto 0) <= "00";
    zext_ln11_reg_183(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln11_fu_124_p2 <= std_logic_vector(unsigned(j_fu_44) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln11_fu_118_p2)
    begin
        if (((icmp_ln11_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_118_p2)
    begin
        if (((icmp_ln11_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bucket_address0 <= zext_ln14_2_fu_163_p1(9 - 1 downto 0);

    bucket_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bucket_ce0 <= ap_const_logic_1;
        else 
            bucket_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_d0 <= sorted_data_load_reg_196;

    bucket_pointer_address0_assign_proc : process(bucket_pointer_addr_reg_211, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln14_fu_148_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bucket_pointer_address0 <= bucket_pointer_addr_reg_211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bucket_pointer_address0 <= zext_ln14_fu_148_p1(4 - 1 downto 0);
        else 
            bucket_pointer_address0 <= "XXXX";
        end if; 
    end process;


    bucket_pointer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bucket_pointer_ce0 <= ap_const_logic_1;
        else 
            bucket_pointer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_d0 <= std_logic_vector(unsigned(bucket_pointer_q0) + unsigned(ap_const_lv32_1));

    bucket_pointer_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bucket_pointer_we0 <= ap_const_logic_1;
        else 
            bucket_pointer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bucket_we0 <= ap_const_logic_1;
        else 
            bucket_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_167_p0 <= grp_fu_167_p00(4 - 1 downto 0);
    grp_fu_167_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ith_radix_fu_140_p1),9));
    grp_fu_167_p1 <= ap_const_lv9_19(5 - 1 downto 0);
    grp_fu_167_p2 <= bucket_pointer_q0(9 - 1 downto 0);
    icmp_ln11_fu_118_p2 <= "1" when (j_fu_44 = ap_const_lv5_19) else "0";
    ith_radix_fu_140_p1 <= shifted_fu_135_p2(4 - 1 downto 0);
    mul_fu_93_p3 <= (i & ap_const_lv2_0);
    shifted_fu_135_p2 <= std_logic_vector(shift_right(signed(sorted_data_q0),to_integer(unsigned('0' & zext_ln11_reg_183(31-1 downto 0)))));
    sorted_data_address0 <= zext_ln11_1_fu_113_p1(6 - 1 downto 0);

    sorted_data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_data_ce0 <= ap_const_logic_1;
        else 
            sorted_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln11_1_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_44),64));
    zext_ln11_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_93_p3),32));
    zext_ln14_2_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_167_p3),64));
    zext_ln14_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ith_radix_reg_201),64));
end behav;
