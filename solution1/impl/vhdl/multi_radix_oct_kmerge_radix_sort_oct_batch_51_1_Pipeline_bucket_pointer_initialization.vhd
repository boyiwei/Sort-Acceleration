-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multi_radix_oct_kmerge_radix_sort_oct_batch_51_1_Pipeline_bucket_pointer_initialization is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bucket_sizes_1208 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1207 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1206 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1205 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1204 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1203 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1202 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1201 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_535 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_534 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_533 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_532 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_531 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_530 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_529 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1216_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1216_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1215_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1215_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1214_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1214_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1213_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1213_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1212_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1212_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1211_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1211_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1210_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1210_out_ap_vld : OUT STD_LOGIC;
    bucket_sizes_1209_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_1209_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_543_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_543_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_542_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_542_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_541_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_541_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_540_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_540_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_539_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_539_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_538_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_538_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_537_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_537_out_ap_vld : OUT STD_LOGIC;
    bucket_pointer_536_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_536_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of multi_radix_oct_kmerge_radix_sort_oct_batch_51_1_Pipeline_bucket_pointer_initialization is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal m_fu_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bucket_pointer_289_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_fu_520_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bucket_pointer_290_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_291_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_292_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_293_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_294_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_295_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_bucket_pointer_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_296_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_297_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_330_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_331_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_332_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_333_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_334_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_335_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_sizes_336_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_i_fu_524_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_524_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_321 : BOOLEAN;
    signal ap_condition_324 : BOOLEAN;
    signal ap_condition_327 : BOOLEAN;
    signal ap_condition_330 : BOOLEAN;
    signal ap_condition_333 : BOOLEAN;
    signal ap_condition_336 : BOOLEAN;
    signal ap_condition_339 : BOOLEAN;
    signal ap_condition_342 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component multi_radix_oct_kmerge_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multi_radix_oct_kmerge_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U5280 : component multi_radix_oct_kmerge_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => bucket_sizes_fu_148,
        din1 => bucket_sizes_330_fu_152,
        din2 => bucket_sizes_331_fu_156,
        din3 => bucket_sizes_332_fu_160,
        din4 => bucket_sizes_333_fu_164,
        din5 => bucket_sizes_334_fu_168,
        din6 => bucket_sizes_335_fu_172,
        din7 => bucket_sizes_336_fu_176,
        din8 => tmp_i_fu_524_p9,
        dout => tmp_i_fu_524_p10);

    flow_control_loop_pipe_sequential_init_U : component multi_radix_oct_kmerge_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    bucket_pointer_289_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_289_fu_112 <= bucket_pointer;
                elsif ((ap_const_boolean_1 = ap_condition_321)) then 
                    bucket_pointer_289_fu_112 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_290_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_290_fu_116 <= bucket_pointer_529;
                elsif ((ap_const_boolean_1 = ap_condition_324)) then 
                    bucket_pointer_290_fu_116 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_291_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_291_fu_120 <= bucket_pointer_530;
                elsif ((ap_const_boolean_1 = ap_condition_327)) then 
                    bucket_pointer_291_fu_120 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_292_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_292_fu_124 <= bucket_pointer_531;
                elsif ((ap_const_boolean_1 = ap_condition_330)) then 
                    bucket_pointer_292_fu_124 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_293_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_293_fu_128 <= bucket_pointer_532;
                elsif ((ap_const_boolean_1 = ap_condition_333)) then 
                    bucket_pointer_293_fu_128 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_294_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_294_fu_132 <= bucket_pointer_533;
                elsif ((ap_const_boolean_1 = ap_condition_336)) then 
                    bucket_pointer_294_fu_132 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_295_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_295_fu_136 <= ap_const_lv32_0;
                elsif (((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    bucket_pointer_295_fu_136 <= next_bucket_pointer_fu_546_p2;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_296_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_296_fu_140 <= bucket_pointer_534;
                elsif ((ap_const_boolean_1 = ap_condition_339)) then 
                    bucket_pointer_296_fu_140 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_pointer_297_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_pointer_297_fu_144 <= bucket_pointer_535;
                elsif ((ap_const_boolean_1 = ap_condition_342)) then 
                    bucket_pointer_297_fu_144 <= bucket_pointer_295_fu_136;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_330_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_330_fu_152 <= bucket_sizes_1202;
                elsif ((ap_const_boolean_1 = ap_condition_324)) then 
                    bucket_sizes_330_fu_152 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_331_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_331_fu_156 <= bucket_sizes_1203;
                elsif ((ap_const_boolean_1 = ap_condition_327)) then 
                    bucket_sizes_331_fu_156 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_332_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_332_fu_160 <= bucket_sizes_1204;
                elsif ((ap_const_boolean_1 = ap_condition_330)) then 
                    bucket_sizes_332_fu_160 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_333_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_333_fu_164 <= bucket_sizes_1205;
                elsif ((ap_const_boolean_1 = ap_condition_333)) then 
                    bucket_sizes_333_fu_164 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_334_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_334_fu_168 <= bucket_sizes_1206;
                elsif ((ap_const_boolean_1 = ap_condition_336)) then 
                    bucket_sizes_334_fu_168 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_335_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_335_fu_172 <= bucket_sizes_1207;
                elsif ((ap_const_boolean_1 = ap_condition_339)) then 
                    bucket_sizes_335_fu_172 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_336_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_336_fu_176 <= bucket_sizes_1208;
                elsif ((ap_const_boolean_1 = ap_condition_342)) then 
                    bucket_sizes_336_fu_176 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    bucket_sizes_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bucket_sizes_fu_148 <= bucket_sizes_1201;
                elsif ((ap_const_boolean_1 = ap_condition_321)) then 
                    bucket_sizes_fu_148 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    m_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_108 <= ap_const_lv4_0;
                elsif (((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_fu_108 <= add_ln33_fu_490_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln33_fu_490_p2 <= std_logic_vector(unsigned(m_fu_108) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_321_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_321 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_0));
    end process;


    ap_condition_324_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_324 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_1));
    end process;


    ap_condition_327_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_327 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_2));
    end process;


    ap_condition_330_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_330 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_3));
    end process;


    ap_condition_333_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_333 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_4));
    end process;


    ap_condition_336_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_336 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_5));
    end process;


    ap_condition_339_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_339 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_6));
    end process;


    ap_condition_342_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_484_p2, trunc_ln34_fu_520_p1)
    begin
                ap_condition_342 <= ((icmp_ln33_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln34_fu_520_p1 = ap_const_lv3_7));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln33_fu_484_p2)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_536_out <= bucket_pointer_289_fu_112;

    bucket_pointer_536_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_536_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_536_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_537_out <= bucket_pointer_290_fu_116;

    bucket_pointer_537_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_537_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_537_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_538_out <= bucket_pointer_291_fu_120;

    bucket_pointer_538_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_538_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_538_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_539_out <= bucket_pointer_292_fu_124;

    bucket_pointer_539_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_539_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_539_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_540_out <= bucket_pointer_293_fu_128;

    bucket_pointer_540_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_540_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_540_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_541_out <= bucket_pointer_294_fu_132;

    bucket_pointer_541_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_541_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_541_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_542_out <= bucket_pointer_296_fu_140;

    bucket_pointer_542_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_542_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_542_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_543_out <= bucket_pointer_297_fu_144;

    bucket_pointer_543_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_543_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_pointer_543_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1209_out <= bucket_sizes_fu_148;

    bucket_sizes_1209_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1209_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1209_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1210_out <= bucket_sizes_330_fu_152;

    bucket_sizes_1210_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1210_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1210_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1211_out <= bucket_sizes_331_fu_156;

    bucket_sizes_1211_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1211_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1211_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1212_out <= bucket_sizes_332_fu_160;

    bucket_sizes_1212_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1212_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1212_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1213_out <= bucket_sizes_333_fu_164;

    bucket_sizes_1213_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1213_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1213_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1214_out <= bucket_sizes_334_fu_168;

    bucket_sizes_1214_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1214_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1214_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1215_out <= bucket_sizes_335_fu_172;

    bucket_sizes_1215_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1215_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1215_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_1216_out <= bucket_sizes_336_fu_176;

    bucket_sizes_1216_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_484_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_1216_out_ap_vld <= ap_const_logic_1;
        else 
            bucket_sizes_1216_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln33_fu_484_p2 <= "1" when (m_fu_108 = ap_const_lv4_8) else "0";
    next_bucket_pointer_fu_546_p2 <= std_logic_vector(unsigned(tmp_i_fu_524_p10) + unsigned(bucket_pointer_295_fu_136));
    tmp_i_fu_524_p9 <= m_fu_108(3 - 1 downto 0);
    trunc_ln34_fu_520_p1 <= m_fu_108(3 - 1 downto 0);
end behav;
