-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity merge_sort_parallel_merge_arrays_1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of merge_sort_parallel_merge_arrays_1_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_989680 : STD_LOGIC_VECTOR (23 downto 0) := "100110001001011010000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_989680 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100110001001011010000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln47_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i3_98_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_24_reg_388 : STD_LOGIC_VECTOR (23 downto 0);
    signal f2_74_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_98_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln47_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_f2_1_phi_fu_111_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_f2_1_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln51_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f2_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_f1_1_phi_fu_120_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_f1_1_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln50_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_addr_gep_fu_99_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal i2_13_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_102_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_sig_allocacmp_i2_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_97_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_97_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i3_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln47_fu_169_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_allocacmp_i_24 : STD_LOGIC_VECTOR (23 downto 0);
    signal f2_01_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_76_fu_295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_f2_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_02_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_100_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_f1_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_24_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln51_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_24_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_103_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_96_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_101 : BOOLEAN;
    signal ap_condition_156 : BOOLEAN;
    signal ap_condition_115 : BOOLEAN;
    signal ap_condition_109 : BOOLEAN;
    signal ap_condition_131 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component merge_sort_parallel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component merge_sort_parallel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    f1_02_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    f1_02_fu_56 <= ap_const_lv32_0;
                elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    f1_02_fu_56 <= f1_100_fu_303_p3;
                end if;
            end if; 
        end if;
    end process;

    f1_97_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    f1_97_fu_44 <= ap_const_lv32_2;
                elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    f1_97_fu_44 <= i3_97_fu_318_p3;
                end if;
            end if; 
        end if;
    end process;

    f2_01_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    f2_01_fu_52 <= ap_const_lv32_1;
                elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    f2_01_fu_52 <= f2_76_fu_295_p3;
                end if;
            end if; 
        end if;
    end process;

    i2_13_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                if ((icmp_ln47_reg_406 = ap_const_lv1_0)) then 
                    i2_13_fu_40 <= i2_102_fu_310_p3;
                elsif ((ap_loop_init_pp0_iter1_reg = ap_const_logic_1)) then 
                    i2_13_fu_40 <= ap_const_lv32_1;
                end if;
            end if; 
        end if;
    end process;

    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_156)) then
                if ((icmp_ln47_fu_163_p2 = ap_const_lv1_0)) then 
                    i_fu_48 <= add_ln47_fu_169_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_48 <= ap_const_lv24_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                f1_98_reg_399 <= ap_sig_allocacmp_f1_98;
                f2_74_reg_393 <= ap_sig_allocacmp_f2_74;
                i3_98_reg_380 <= ap_sig_allocacmp_i3_98;
                i_24_reg_388 <= ap_sig_allocacmp_i_24;
                icmp_ln47_reg_406 <= icmp_ln47_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_163_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln50_reg_415 <= icmp_ln50_fu_180_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln47_fu_169_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_24) + unsigned(ap_const_lv24_1));
    and_ln51_fu_221_p2 <= (xor_ln51_fu_215_p2 and icmp_ln51_fu_204_p2);
    and_ln60_fu_250_p2 <= (icmp_ln60_fu_239_p2 and icmp_ln60_24_fu_245_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_101_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_101 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_109_assign_proc : process(icmp_ln47_reg_406, icmp_ln50_reg_415, and_ln51_fu_221_p2)
    begin
                ap_condition_109 <= (((icmp_ln50_reg_415 = ap_const_lv1_1) and (icmp_ln47_reg_406 = ap_const_lv1_0)) or ((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln51_fu_221_p2)));
    end process;


    ap_condition_115_assign_proc : process(icmp_ln47_reg_406, icmp_ln50_reg_415, and_ln51_fu_221_p2)
    begin
                ap_condition_115 <= ((icmp_ln50_reg_415 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln51_fu_221_p2) and (icmp_ln47_reg_406 = ap_const_lv1_0));
    end process;


    ap_condition_131_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_131 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_156_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_156 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln47_fu_163_p2, ap_start_int)
    begin
        if (((icmp_ln47_fu_163_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_f1_1_phi_fu_120_p4_assign_proc : process(f1_98_reg_399, icmp_ln47_reg_406, icmp_ln50_reg_415, and_ln51_fu_221_p2, f1_fu_233_p2, ap_phi_reg_pp0_iter1_f1_1_reg_117)
    begin
        if (((icmp_ln50_reg_415 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln51_fu_221_p2) and (icmp_ln47_reg_406 = ap_const_lv1_0))) then 
            ap_phi_mux_f1_1_phi_fu_120_p4 <= f1_98_reg_399;
        elsif ((((icmp_ln50_reg_415 = ap_const_lv1_1) and (icmp_ln47_reg_406 = ap_const_lv1_0)) or ((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln51_fu_221_p2)))) then 
            ap_phi_mux_f1_1_phi_fu_120_p4 <= f1_fu_233_p2;
        else 
            ap_phi_mux_f1_1_phi_fu_120_p4 <= ap_phi_reg_pp0_iter1_f1_1_reg_117;
        end if; 
    end process;


    ap_phi_mux_f2_1_phi_fu_111_p4_assign_proc : process(f2_74_reg_393, icmp_ln47_reg_406, icmp_ln50_reg_415, ap_phi_reg_pp0_iter1_f2_1_reg_108, and_ln51_fu_221_p2, f2_fu_227_p2)
    begin
        if (((icmp_ln50_reg_415 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln51_fu_221_p2) and (icmp_ln47_reg_406 = ap_const_lv1_0))) then 
            ap_phi_mux_f2_1_phi_fu_111_p4 <= f2_fu_227_p2;
        elsif ((((icmp_ln50_reg_415 = ap_const_lv1_1) and (icmp_ln47_reg_406 = ap_const_lv1_0)) or ((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln51_fu_221_p2)))) then 
            ap_phi_mux_f2_1_phi_fu_111_p4 <= f2_74_reg_393;
        else 
            ap_phi_mux_f2_1_phi_fu_111_p4 <= ap_phi_reg_pp0_iter1_f2_1_reg_108;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_f1_1_reg_117 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_f2_1_reg_108 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_f1_98_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_406, ap_block_pp0_stage0, ap_loop_init, f1_02_fu_56, f1_100_fu_303_p3, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                ap_sig_allocacmp_f1_98 <= ap_const_lv32_0;
            elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_f1_98 <= f1_100_fu_303_p3;
            else 
                ap_sig_allocacmp_f1_98 <= f1_02_fu_56;
            end if;
        else 
            ap_sig_allocacmp_f1_98 <= f1_02_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_f2_74_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_406, ap_block_pp0_stage0, ap_loop_init, f2_01_fu_52, f2_76_fu_295_p3, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                ap_sig_allocacmp_f2_74 <= ap_const_lv32_1;
            elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_f2_74 <= f2_76_fu_295_p3;
            else 
                ap_sig_allocacmp_f2_74 <= f2_01_fu_52;
            end if;
        else 
            ap_sig_allocacmp_f2_74 <= f2_01_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_i2_100_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i2_13_fu_40, ap_loop_init_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_sig_allocacmp_i2_100 <= ap_const_lv32_1;
        else 
            ap_sig_allocacmp_i2_100 <= i2_13_fu_40;
        end if; 
    end process;


    ap_sig_allocacmp_i3_98_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_406, ap_block_pp0_stage0, ap_loop_init, f1_97_fu_44, i3_97_fu_318_p3, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                ap_sig_allocacmp_i3_98 <= ap_const_lv32_2;
            elsif (((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_i3_98 <= i3_97_fu_318_p3;
            else 
                ap_sig_allocacmp_i3_98 <= f1_97_fu_44;
            end if;
        else 
            ap_sig_allocacmp_i3_98 <= f1_97_fu_44;
        end if; 
    end process;


    ap_sig_allocacmp_i_24_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_48, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_24 <= ap_const_lv24_0;
        else 
            ap_sig_allocacmp_i_24 <= i_fu_48;
        end if; 
    end process;

    f1_100_fu_303_p3 <= 
        i3_98_reg_380 when (and_ln60_fu_250_p2(0) = '1') else 
        ap_phi_mux_f1_1_phi_fu_120_p4;
    f1_fu_233_p2 <= std_logic_vector(unsigned(f1_98_reg_399) + unsigned(ap_const_lv32_1));
    f2_76_fu_295_p3 <= 
        i2_103_fu_273_p3 when (and_ln60_fu_250_p2(0) = '1') else 
        ap_phi_mux_f2_1_phi_fu_111_p4;
    f2_fu_227_p2 <= std_logic_vector(unsigned(f2_74_reg_393) + unsigned(ap_const_lv32_1));
    i2_102_fu_310_p3 <= 
        i2_103_fu_273_p3 when (and_ln60_fu_250_p2(0) = '1') else 
        ap_sig_allocacmp_i2_100;
    i2_103_fu_273_p3 <= 
        i2_fu_256_p2 when (icmp_ln64_fu_267_p2(0) = '1') else 
        ap_const_lv32_989680;
    i2_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i2_100) + unsigned(ap_const_lv32_2));
    i3_96_fu_287_p3 <= 
        i3_fu_262_p2 when (icmp_ln66_fu_281_p2(0) = '1') else 
        ap_const_lv32_989680;
    i3_97_fu_318_p3 <= 
        i3_96_fu_287_p3 when (and_ln60_fu_250_p2(0) = '1') else 
        i3_98_reg_380;
    i3_fu_262_p2 <= std_logic_vector(unsigned(i3_98_reg_380) + unsigned(ap_const_lv32_2));
    icmp_ln47_fu_163_p2 <= "1" when (ap_sig_allocacmp_i_24 = ap_const_lv24_989680) else "0";
    icmp_ln50_fu_180_p2 <= "1" when (ap_sig_allocacmp_f2_74 = ap_sig_allocacmp_i3_98) else "0";
    icmp_ln51_24_fu_209_p2 <= "1" when (signed(in_r_q0) < signed(in_r_q1)) else "0";
    icmp_ln51_fu_204_p2 <= "1" when (signed(f1_98_reg_399) < signed(ap_sig_allocacmp_i2_100)) else "0";
    icmp_ln60_24_fu_245_p2 <= "1" when (ap_phi_mux_f2_1_phi_fu_111_p4 = i3_98_reg_380) else "0";
    icmp_ln60_fu_239_p2 <= "1" when (ap_phi_mux_f1_1_phi_fu_120_p4 = ap_sig_allocacmp_i2_100) else "0";
    icmp_ln64_fu_267_p2 <= "1" when (signed(i2_fu_256_p2) < signed(ap_const_lv32_989680)) else "0";
    icmp_ln66_fu_281_p2 <= "1" when (signed(i3_fu_262_p2) < signed(ap_const_lv32_989680)) else "0";
    in_r_address0 <= zext_ln50_fu_186_p1(24 - 1 downto 0);
    in_r_address1 <= zext_ln49_fu_175_p1(24 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_addr_gep_fu_99_p3 <= zext_ln47_fu_199_p1(24 - 1 downto 0);

    out_r_address0_assign_proc : process(zext_ln47_fu_199_p1, out_addr_gep_fu_99_p3, ap_condition_115, ap_condition_109, ap_condition_131)
    begin
        if ((ap_const_boolean_1 = ap_condition_131)) then
            if ((ap_const_boolean_1 = ap_condition_109)) then 
                out_r_address0 <= out_addr_gep_fu_99_p3;
            elsif ((ap_const_boolean_1 = ap_condition_115)) then 
                out_r_address0 <= zext_ln47_fu_199_p1(24 - 1 downto 0);
            else 
                out_r_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_r_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln47_reg_406, icmp_ln50_reg_415, and_ln51_fu_221_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((icmp_ln50_reg_415 = ap_const_lv1_1) and (icmp_ln47_reg_406 = ap_const_lv1_0)) or ((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln51_fu_221_p2)))) or ((icmp_ln50_reg_415 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln51_fu_221_p2) and (icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(in_r_q0, in_r_q1, ap_condition_115, ap_condition_109, ap_condition_131)
    begin
        if ((ap_const_boolean_1 = ap_condition_131)) then
            if ((ap_const_boolean_1 = ap_condition_109)) then 
                out_r_d0 <= in_r_q1;
            elsif ((ap_const_boolean_1 = ap_condition_115)) then 
                out_r_d0 <= in_r_q0;
            else 
                out_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln47_reg_406, icmp_ln50_reg_415, and_ln51_fu_221_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((icmp_ln50_reg_415 = ap_const_lv1_1) and (icmp_ln47_reg_406 = ap_const_lv1_0)) or ((icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln51_fu_221_p2)))) or ((icmp_ln50_reg_415 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln51_fu_221_p2) and (icmp_ln47_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln51_fu_215_p2 <= (icmp_ln51_24_fu_209_p2 xor ap_const_lv1_1);
    zext_ln47_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_24_reg_388),64));
    zext_ln49_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_f1_98),64));
    zext_ln50_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_f2_74),64));
end behav;
