-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort_top_radix_sort_unified_bucket_1_2_Pipeline_input_bucket is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sorted_data_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    sorted_data_ce0 : OUT STD_LOGIC;
    sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln39 : IN STD_LOGIC_VECTOR (4 downto 0);
    bucket_pointer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer_ce0 : OUT STD_LOGIC;
    bucket_pointer_we0 : OUT STD_LOGIC;
    bucket_pointer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer_ce1 : OUT STD_LOGIC;
    bucket_pointer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    bucket_ce0 : OUT STD_LOGIC;
    bucket_we0 : OUT STD_LOGIC;
    bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_sizes_ce0 : OUT STD_LOGIC;
    bucket_sizes_we0 : OUT STD_LOGIC;
    bucket_sizes_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_sizes_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_sizes_ce1 : OUT STD_LOGIC;
    bucket_sizes_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sort_top_radix_sort_unified_bucket_1_2_Pipeline_input_bucket is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln39_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln39_cast_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_cast_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_data_load_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_pointer_addr_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_cmp9_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp9_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal bucket_sizes_addr_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_cmp_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln42_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg6_fu_46 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg5_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_54 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln39_fu_170_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shifted_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ith_radix_fu_191_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal next_ith_radix_1_fu_214_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal reuse_select10_fu_246_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sort_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sort_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln39_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_62 <= add_ln39_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv20_0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg6_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg6_fu_46 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_addr_reg6_fu_46 <= zext_ln42_fu_195_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_54 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_54 <= zext_ln46_fu_224_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg5_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    reuse_reg5_fu_50 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    reuse_reg5_fu_50 <= add_ln43_fu_258_p2;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    reuse_reg_fu_58 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    reuse_reg_fu_58 <= add_ln46_fu_280_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                addr_cmp9_reg_352 <= addr_cmp9_fu_203_p2;
                addr_cmp_reg_363 <= addr_cmp_fu_232_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                bucket_pointer_addr_reg_346 <= zext_ln42_fu_195_p1(4 - 1 downto 0);
                bucket_sizes_addr_reg_357 <= zext_ln46_fu_224_p1(4 - 1 downto 0);
                sorted_data_load_reg_341 <= sorted_data_q0;
                    zext_ln39_cast_reg_327(4 downto 0) <= zext_ln39_cast_fu_132_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln39_cast_reg_327(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln39_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv20_1));
    add_ln43_fu_258_p2 <= std_logic_vector(unsigned(reuse_select10_fu_246_p3) + unsigned(ap_const_lv32_1));
    add_ln46_fu_280_p2 <= std_logic_vector(unsigned(reuse_select_fu_273_p3) + unsigned(ap_const_lv32_1));
    addr_cmp9_fu_203_p2 <= "1" when (reuse_addr_reg6_fu_46 = zext_ln42_fu_195_p1) else "0";
    addr_cmp_fu_232_p2 <= "1" when (reuse_addr_reg_fu_54 = zext_ln46_fu_224_p1) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln39_fu_164_p2)
    begin
        if (((icmp_ln39_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv20_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_62;
        end if; 
    end process;

    bucket_address0 <= zext_ln42_1_fu_253_p1(20 - 1 downto 0);

    bucket_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_ce0 <= ap_const_logic_1;
        else 
            bucket_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_d0 <= sorted_data_load_reg_341;
    bucket_pointer_address0 <= bucket_pointer_addr_reg_346;
    bucket_pointer_address1 <= zext_ln42_fu_195_p1(4 - 1 downto 0);

    bucket_pointer_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_pointer_ce0 <= ap_const_logic_1;
        else 
            bucket_pointer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_pointer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_pointer_ce1 <= ap_const_logic_1;
        else 
            bucket_pointer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_pointer_d0 <= std_logic_vector(unsigned(reuse_select10_fu_246_p3) + unsigned(ap_const_lv32_1));

    bucket_pointer_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_pointer_we0 <= ap_const_logic_1;
        else 
            bucket_pointer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_address0 <= bucket_sizes_addr_reg_357;
    bucket_sizes_address1 <= zext_ln46_fu_224_p1(4 - 1 downto 0);

    bucket_sizes_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_sizes_ce0 <= ap_const_logic_1;
        else 
            bucket_sizes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_sizes_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_sizes_ce1 <= ap_const_logic_1;
        else 
            bucket_sizes_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_sizes_d0 <= std_logic_vector(unsigned(reuse_select_fu_273_p3) + unsigned(ap_const_lv32_1));

    bucket_sizes_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_sizes_we0 <= ap_const_logic_1;
        else 
            bucket_sizes_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bucket_we0 <= ap_const_logic_1;
        else 
            bucket_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln39_fu_164_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv20_F4240) else "0";
    ith_radix_fu_191_p1 <= shifted_fu_186_p2(4 - 1 downto 0);
    j_1_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
    next_ith_radix_1_fu_214_p4 <= shifted_fu_186_p2(7 downto 4);
    reuse_select10_fu_246_p3 <= 
        reuse_reg5_fu_50 when (addr_cmp9_reg_352(0) = '1') else 
        bucket_pointer_q1;
    reuse_select_fu_273_p3 <= 
        reuse_reg_fu_58 when (addr_cmp_reg_363(0) = '1') else 
        bucket_sizes_q1;
    shifted_fu_186_p2 <= std_logic_vector(shift_right(signed(sorted_data_q0),to_integer(unsigned('0' & zext_ln39_cast_reg_327(31-1 downto 0)))));
    sorted_data_address0 <= j_1_cast_fu_176_p1(19 - 1 downto 0);

    sorted_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sorted_data_ce0 <= ap_const_logic_1;
        else 
            sorted_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln39_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln39),32));
    zext_ln42_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reuse_select10_fu_246_p3),64));
    zext_ln42_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ith_radix_fu_191_p1),64));
    zext_ln46_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_ith_radix_1_fu_214_p4),64));
end behav;
