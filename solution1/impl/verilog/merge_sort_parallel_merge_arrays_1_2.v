// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge_sort_parallel_merge_arrays_1_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [23:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [23:0] in_r_address1;
output   in_r_ce1;
input  [31:0] in_r_q1;
output  [23:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_idle;
reg in_r_ce0;
reg in_r_ce1;
reg[23:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[31:0] out_r_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln47_fu_165_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] i3_94_reg_382;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] i_23_reg_390;
reg   [31:0] f2_71_reg_395;
reg   [31:0] f1_94_reg_401;
reg   [0:0] icmp_ln47_reg_408;
wire   [0:0] icmp_ln50_fu_182_p2;
reg   [0:0] icmp_ln50_reg_417;
reg   [31:0] ap_phi_mux_f2_1_phi_fu_113_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_f2_1_reg_110;
wire   [0:0] and_ln51_fu_223_p2;
wire   [31:0] f2_fu_229_p2;
reg   [31:0] ap_phi_mux_f1_1_phi_fu_122_p4;
wire   [31:0] f1_fu_235_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_f1_1_reg_119;
wire   [63:0] zext_ln49_fu_177_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln50_fu_188_p1;
wire   [63:0] zext_ln47_fu_201_p1;
wire   [23:0] out_r_addr_gep_fu_101_p3;
reg   [31:0] i2_13_fu_42;
wire   [31:0] i2_98_fu_312_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [31:0] ap_sig_allocacmp_i2_96;
reg   [31:0] f1_93_fu_46;
wire   [31:0] i3_93_fu_320_p3;
reg   [31:0] ap_sig_allocacmp_i3_94;
reg   [23:0] i_fu_50;
wire   [23:0] add_ln47_fu_171_p2;
reg   [23:0] ap_sig_allocacmp_i_23;
reg   [31:0] f2_01_fu_54;
wire   [31:0] f2_73_fu_297_p3;
reg   [31:0] ap_sig_allocacmp_f2_71;
reg   [31:0] f1_02_fu_58;
wire   [31:0] f1_96_fu_305_p3;
reg   [31:0] ap_sig_allocacmp_f1_94;
wire   [0:0] icmp_ln51_23_fu_211_p2;
wire   [0:0] icmp_ln51_fu_206_p2;
wire   [0:0] xor_ln51_fu_217_p2;
wire   [0:0] icmp_ln60_fu_241_p2;
wire   [0:0] icmp_ln60_23_fu_247_p2;
wire   [31:0] i2_fu_258_p2;
wire   [0:0] icmp_ln64_fu_269_p2;
wire   [31:0] i3_fu_264_p2;
wire   [0:0] icmp_ln66_fu_283_p2;
wire   [0:0] and_ln60_fu_252_p2;
wire   [31:0] i2_99_fu_275_p3;
wire   [31:0] i3_92_fu_289_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_101;
reg    ap_condition_156;
reg    ap_condition_115;
reg    ap_condition_109;
reg    ap_condition_131;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

merge_sort_parallel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            f1_02_fu_58 <= 32'd0;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            f1_02_fu_58 <= f1_96_fu_305_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            f1_93_fu_46 <= 32'd10000000;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            f1_93_fu_46 <= i3_93_fu_320_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            f2_01_fu_54 <= 32'd8388608;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            f2_01_fu_54 <= f2_73_fu_297_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        if ((icmp_ln47_reg_408 == 1'd0)) begin
            i2_13_fu_42 <= i2_98_fu_312_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            i2_13_fu_42 <= 32'd8388608;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if ((icmp_ln47_fu_165_p2 == 1'd0)) begin
            i_fu_50 <= add_ln47_fu_171_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 24'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        f1_94_reg_401 <= ap_sig_allocacmp_f1_94;
        f2_71_reg_395 <= ap_sig_allocacmp_f2_71;
        i3_94_reg_382 <= ap_sig_allocacmp_i3_94;
        i_23_reg_390 <= ap_sig_allocacmp_i_23;
        icmp_ln47_reg_408 <= icmp_ln47_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_165_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_417 <= icmp_ln50_fu_182_p2;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_417 == 1'd0) & (1'd0 == and_ln51_fu_223_p2) & (icmp_ln47_reg_408 == 1'd0))) begin
        ap_phi_mux_f1_1_phi_fu_122_p4 = f1_94_reg_401;
    end else if ((((icmp_ln50_reg_417 == 1'd1) & (icmp_ln47_reg_408 == 1'd0)) | ((icmp_ln47_reg_408 == 1'd0) & (1'd1 == and_ln51_fu_223_p2)))) begin
        ap_phi_mux_f1_1_phi_fu_122_p4 = f1_fu_235_p2;
    end else begin
        ap_phi_mux_f1_1_phi_fu_122_p4 = ap_phi_reg_pp0_iter1_f1_1_reg_119;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_417 == 1'd0) & (1'd0 == and_ln51_fu_223_p2) & (icmp_ln47_reg_408 == 1'd0))) begin
        ap_phi_mux_f2_1_phi_fu_113_p4 = f2_fu_229_p2;
    end else if ((((icmp_ln50_reg_417 == 1'd1) & (icmp_ln47_reg_408 == 1'd0)) | ((icmp_ln47_reg_408 == 1'd0) & (1'd1 == and_ln51_fu_223_p2)))) begin
        ap_phi_mux_f2_1_phi_fu_113_p4 = f2_71_reg_395;
    end else begin
        ap_phi_mux_f2_1_phi_fu_113_p4 = ap_phi_reg_pp0_iter1_f2_1_reg_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            ap_sig_allocacmp_f1_94 = 32'd0;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_sig_allocacmp_f1_94 = f1_96_fu_305_p3;
        end else begin
            ap_sig_allocacmp_f1_94 = f1_02_fu_58;
        end
    end else begin
        ap_sig_allocacmp_f1_94 = f1_02_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            ap_sig_allocacmp_f2_71 = 32'd8388608;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_sig_allocacmp_f2_71 = f2_73_fu_297_p3;
        end else begin
            ap_sig_allocacmp_f2_71 = f2_01_fu_54;
        end
    end else begin
        ap_sig_allocacmp_f2_71 = f2_01_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_i2_96 = 32'd8388608;
    end else begin
        ap_sig_allocacmp_i2_96 = i2_13_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            ap_sig_allocacmp_i3_94 = 32'd10000000;
        end else if (((icmp_ln47_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_sig_allocacmp_i3_94 = i3_93_fu_320_p3;
        end else begin
            ap_sig_allocacmp_i3_94 = f1_93_fu_46;
        end
    end else begin
        ap_sig_allocacmp_i3_94 = f1_93_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_23 = 24'd0;
    end else begin
        ap_sig_allocacmp_i_23 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((1'b1 == ap_condition_109)) begin
            out_r_address0 = out_r_addr_gep_fu_101_p3;
        end else if ((1'b1 == ap_condition_115)) begin
            out_r_address0 = zext_ln47_fu_201_p1;
        end else begin
            out_r_address0 = 'bx;
        end
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln50_reg_417 == 1'd1) & (icmp_ln47_reg_408 == 1'd0)) | ((icmp_ln47_reg_408 == 1'd0) & (1'd1 == and_ln51_fu_223_p2)))) | ((icmp_ln50_reg_417 == 1'd0) & (1'd0 == and_ln51_fu_223_p2) & (icmp_ln47_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((1'b1 == ap_condition_109)) begin
            out_r_d0 = in_r_q1;
        end else if ((1'b1 == ap_condition_115)) begin
            out_r_d0 = in_r_q0;
        end else begin
            out_r_d0 = 'bx;
        end
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln50_reg_417 == 1'd1) & (icmp_ln47_reg_408 == 1'd0)) | ((icmp_ln47_reg_408 == 1'd0) & (1'd1 == and_ln51_fu_223_p2)))) | ((icmp_ln50_reg_417 == 1'd0) & (1'd0 == and_ln51_fu_223_p2) & (icmp_ln47_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_fu_171_p2 = (ap_sig_allocacmp_i_23 + 24'd1);

assign and_ln51_fu_223_p2 = (xor_ln51_fu_217_p2 & icmp_ln51_fu_206_p2);

assign and_ln60_fu_252_p2 = (icmp_ln60_fu_241_p2 & icmp_ln60_23_fu_247_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_109 = (((icmp_ln50_reg_417 == 1'd1) & (icmp_ln47_reg_408 == 1'd0)) | ((icmp_ln47_reg_408 == 1'd0) & (1'd1 == and_ln51_fu_223_p2)));
end

always @ (*) begin
    ap_condition_115 = ((icmp_ln50_reg_417 == 1'd0) & (1'd0 == and_ln51_fu_223_p2) & (icmp_ln47_reg_408 == 1'd0));
end

always @ (*) begin
    ap_condition_131 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_156 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter1_f1_1_reg_119 = 'bx;

assign ap_phi_reg_pp0_iter1_f2_1_reg_110 = 'bx;

assign f1_96_fu_305_p3 = ((and_ln60_fu_252_p2[0:0] == 1'b1) ? i3_94_reg_382 : ap_phi_mux_f1_1_phi_fu_122_p4);

assign f1_fu_235_p2 = (f1_94_reg_401 + 32'd1);

assign f2_73_fu_297_p3 = ((and_ln60_fu_252_p2[0:0] == 1'b1) ? i2_99_fu_275_p3 : ap_phi_mux_f2_1_phi_fu_113_p4);

assign f2_fu_229_p2 = (f2_71_reg_395 + 32'd1);

assign i2_98_fu_312_p3 = ((and_ln60_fu_252_p2[0:0] == 1'b1) ? i2_99_fu_275_p3 : ap_sig_allocacmp_i2_96);

assign i2_99_fu_275_p3 = ((icmp_ln64_fu_269_p2[0:0] == 1'b1) ? i2_fu_258_p2 : 32'd10000000);

assign i2_fu_258_p2 = (ap_sig_allocacmp_i2_96 + 32'd16777216);

assign i3_92_fu_289_p3 = ((icmp_ln66_fu_283_p2[0:0] == 1'b1) ? i3_fu_264_p2 : 32'd10000000);

assign i3_93_fu_320_p3 = ((and_ln60_fu_252_p2[0:0] == 1'b1) ? i3_92_fu_289_p3 : i3_94_reg_382);

assign i3_fu_264_p2 = (i3_94_reg_382 + 32'd16777216);

assign icmp_ln47_fu_165_p2 = ((ap_sig_allocacmp_i_23 == 24'd10000000) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_182_p2 = ((ap_sig_allocacmp_f2_71 == ap_sig_allocacmp_i3_94) ? 1'b1 : 1'b0);

assign icmp_ln51_23_fu_211_p2 = (($signed(in_r_q0) < $signed(in_r_q1)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_206_p2 = (($signed(f1_94_reg_401) < $signed(ap_sig_allocacmp_i2_96)) ? 1'b1 : 1'b0);

assign icmp_ln60_23_fu_247_p2 = ((ap_phi_mux_f2_1_phi_fu_113_p4 == i3_94_reg_382) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_241_p2 = ((ap_phi_mux_f1_1_phi_fu_122_p4 == ap_sig_allocacmp_i2_96) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_269_p2 = (($signed(i2_fu_258_p2) < $signed(32'd10000000)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_283_p2 = (($signed(i3_fu_264_p2) < $signed(32'd10000000)) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln50_fu_188_p1;

assign in_r_address1 = zext_ln49_fu_177_p1;

assign out_r_addr_gep_fu_101_p3 = zext_ln47_fu_201_p1;

assign xor_ln51_fu_217_p2 = (icmp_ln51_23_fu_211_p2 ^ 1'd1);

assign zext_ln47_fu_201_p1 = i_23_reg_390;

assign zext_ln49_fu_177_p1 = ap_sig_allocacmp_f1_94;

assign zext_ln50_fu_188_p1 = ap_sig_allocacmp_f2_71;

endmodule //merge_sort_parallel_merge_arrays_1_2
