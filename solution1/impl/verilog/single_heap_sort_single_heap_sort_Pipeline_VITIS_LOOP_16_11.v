// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_16_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln57_1,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        data_q0,
        data_address1,
        data_ce1,
        data_we1,
        data_d1,
        data_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [22:0] zext_ln57_1;
output  [22:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
input  [31:0] data_q0;
output  [22:0] data_address1;
output   data_ce1;
output   data_we1;
output  [31:0] data_d1;
input  [31:0] data_q1;

reg ap_idle;
reg[22:0] data_address0;
reg data_ce0;
reg data_we0;
reg[22:0] data_address1;
reg data_ce1;
reg data_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [0:0] icmp_ln30_fu_179_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [31:0] zext_ln57_1_cast_fu_101_p1;
reg   [31:0] zext_ln57_1_cast_reg_201;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [31:0] grp_load_fu_92_p1;
reg   [31:0] largest_1_reg_206;
wire   [31:0] left_fu_116_p2;
reg   [31:0] left_reg_213;
wire   [31:0] right_fu_122_p2;
reg   [31:0] right_reg_218;
wire   [0:0] icmp_ln22_fu_133_p2;
reg   [0:0] icmp_ln22_reg_225;
wire   [0:0] icmp_ln26_fu_159_p2;
reg   [0:0] icmp_ln26_reg_239;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [31:0] largest_load_reg_243;
reg   [22:0] data_addr_4_reg_261;
reg   [22:0] data_addr_5_reg_267;
reg   [31:0] temp_reg_273;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [63:0] zext_ln22_fu_128_p1;
wire   [63:0] zext_ln22_1_fu_139_p1;
wire   [63:0] zext_ln26_fu_155_p1;
wire   [63:0] zext_ln26_1_fu_163_p1;
wire   [63:0] zext_ln34_fu_184_p1;
wire   [63:0] zext_ln34_1_fu_188_p1;
reg   [31:0] largest_fu_24;
wire   [31:0] select_ln26_fu_168_p3;
wire   [31:0] select_ln22_fu_144_p3;
reg   [31:0] ap_sig_allocacmp_largest_2;
reg   [31:0] ap_sig_allocacmp_largest_load;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_largest_1;
wire   [31:0] shl_ln18_fu_110_p2;
wire   [0:0] grp_fu_95_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_done_reg = 1'b0;
end

single_heap_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        largest_fu_24 <= 32'd0;
    end else if (((icmp_ln22_reg_225 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        largest_fu_24 <= select_ln22_fu_144_p3;
    end else if (((icmp_ln26_reg_239 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        largest_fu_24 <= select_ln26_fu_168_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_addr_4_reg_261 <= zext_ln34_fu_184_p1;
        data_addr_5_reg_267 <= zext_ln34_1_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln22_reg_225 <= icmp_ln22_fu_133_p2;
        largest_1_reg_206 <= grp_load_fu_92_p1;
        left_reg_213[31 : 1] <= left_fu_116_p2[31 : 1];
        right_reg_218[31 : 1] <= right_fu_122_p2[31 : 1];
        zext_ln57_1_cast_reg_201[22 : 0] <= zext_ln57_1_cast_fu_101_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln26_reg_239 <= icmp_ln26_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        largest_load_reg_243 <= grp_load_fu_92_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_reg_273 <= data_q1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln30_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_largest_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_largest_1 = largest_fu_24;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_239 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_sig_allocacmp_largest_2 = select_ln26_fu_168_p3;
    end else begin
        ap_sig_allocacmp_largest_2 = largest_fu_24;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_225 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_sig_allocacmp_largest_load = select_ln22_fu_144_p3;
    end else begin
        ap_sig_allocacmp_largest_load = largest_fu_24;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_address0 = data_addr_4_reg_261;
    end else if (((icmp_ln30_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_address0 = zext_ln34_1_fu_188_p1;
    end else if (((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_address0 = zext_ln26_1_fu_163_p1;
    end else if (((icmp_ln22_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_address0 = zext_ln22_1_fu_139_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_address1 = data_addr_5_reg_267;
    end else if (((icmp_ln30_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_address1 = zext_ln34_fu_184_p1;
    end else if (((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_address1 = zext_ln26_fu_155_p1;
    end else if (((icmp_ln22_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_address1 = zext_ln22_fu_128_p1;
    end else begin
        data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln30_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln22_fu_133_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln30_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln22_fu_133_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_we1 = 1'b1;
    end else begin
        data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_92_p1 = ap_sig_allocacmp_largest_2;
    end else if (((icmp_ln26_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_load_fu_92_p1 = ap_sig_allocacmp_largest_load;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_load_fu_92_p1 = ap_sig_allocacmp_largest_1;
    end else begin
        grp_load_fu_92_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln30_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign data_d0 = data_q0;

assign data_d1 = temp_reg_273;

assign grp_fu_95_p2 = (($signed(data_q1) > $signed(data_q0)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_133_p2 = (($signed(zext_ln57_1_cast_fu_101_p1) > $signed(left_fu_116_p2)) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_159_p2 = (($signed(zext_ln57_1_cast_reg_201) > $signed(right_reg_218)) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_179_p2 = ((grp_load_fu_92_p1 == largest_1_reg_206) ? 1'b1 : 1'b0);

assign left_fu_116_p2 = (shl_ln18_fu_110_p2 | 32'd1);

assign right_fu_122_p2 = (shl_ln18_fu_110_p2 + 32'd2);

assign select_ln22_fu_144_p3 = ((grp_fu_95_p2[0:0] == 1'b1) ? left_reg_213 : largest_1_reg_206);

assign select_ln26_fu_168_p3 = ((grp_fu_95_p2[0:0] == 1'b1) ? right_reg_218 : largest_load_reg_243);

assign shl_ln18_fu_110_p2 = grp_load_fu_92_p1 << 32'd1;

assign zext_ln22_1_fu_139_p1 = grp_load_fu_92_p1;

assign zext_ln22_fu_128_p1 = left_fu_116_p2;

assign zext_ln26_1_fu_163_p1 = grp_load_fu_92_p1;

assign zext_ln26_fu_155_p1 = right_reg_218;

assign zext_ln34_1_fu_188_p1 = grp_load_fu_92_p1;

assign zext_ln34_fu_184_p1 = largest_1_reg_206;

assign zext_ln57_1_cast_fu_101_p1 = zext_ln57_1;

always @ (posedge ap_clk) begin
    zext_ln57_1_cast_reg_201[31:23] <= 9'b000000000;
    left_reg_213[0] <= 1'b1;
    right_reg_218[0] <= 1'b0;
end

endmodule //single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_16_11
