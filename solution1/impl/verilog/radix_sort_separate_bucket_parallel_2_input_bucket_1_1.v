// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module radix_sort_separate_bucket_parallel_2_input_bucket_1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i,
        sorted_data_address0,
        sorted_data_ce0,
        sorted_data_q0,
        bucket_address0,
        bucket_ce0,
        bucket_we0,
        bucket_d0,
        bucket_pointer_address0,
        bucket_pointer_ce0,
        bucket_pointer_we0,
        bucket_pointer_d0,
        bucket_pointer_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] i;
output  [5:0] sorted_data_address0;
output   sorted_data_ce0;
input  [31:0] sorted_data_q0;
output  [8:0] bucket_address0;
output   bucket_ce0;
output   bucket_we0;
output  [31:0] bucket_d0;
output  [3:0] bucket_pointer_address0;
output   bucket_pointer_ce0;
output   bucket_pointer_we0;
output  [31:0] bucket_pointer_d0;
input  [31:0] bucket_pointer_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sorted_data_ce0;
reg bucket_ce0;
reg bucket_we0;
reg[3:0] bucket_pointer_address0;
reg bucket_pointer_ce0;
reg bucket_pointer_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln11_fu_101_p1;
reg   [31:0] zext_ln11_reg_183;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_118_p2;
reg   [31:0] sorted_data_load_reg_196;
wire    ap_CS_fsm_state3;
wire   [3:0] ith_radix_fu_140_p1;
reg   [3:0] ith_radix_reg_201;
reg   [3:0] bucket_pointer_addr_reg_211;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln11_1_fu_113_p1;
wire   [63:0] zext_ln14_fu_148_p1;
wire   [63:0] zext_ln14_2_fu_163_p1;
wire    ap_CS_fsm_state6;
reg   [4:0] j_fu_44;
wire   [4:0] add_ln11_fu_124_p2;
reg    ap_block_state1;
wire   [4:0] mul_fu_93_p3;
wire   [31:0] shifted_fu_135_p2;
wire   [8:0] grp_fu_167_p3;
wire   [3:0] grp_fu_167_p0;
wire   [4:0] grp_fu_167_p1;
wire   [8:0] grp_fu_167_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire   [8:0] grp_fu_167_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

radix_sort_separate_bucket_parallel_2_mac_muladd_4ns_5ns_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_4ns_5ns_9ns_9_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .din2(grp_fu_167_p2),
    .ce(1'b1),
    .dout(grp_fu_167_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln11_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_44 <= 5'd0;
    end else if (((icmp_ln11_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_44 <= add_ln11_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bucket_pointer_addr_reg_211 <= zext_ln14_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ith_radix_reg_201 <= ith_radix_fu_140_p1;
        sorted_data_load_reg_196 <= sorted_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln11_reg_183[4 : 2] <= zext_ln11_fu_101_p1[4 : 2];
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln11_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bucket_ce0 = 1'b1;
    end else begin
        bucket_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bucket_pointer_address0 = bucket_pointer_addr_reg_211;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bucket_pointer_address0 = zext_ln14_fu_148_p1;
    end else begin
        bucket_pointer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        bucket_pointer_ce0 = 1'b1;
    end else begin
        bucket_pointer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bucket_pointer_we0 = 1'b1;
    end else begin
        bucket_pointer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bucket_we0 = 1'b1;
    end else begin
        bucket_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_data_ce0 = 1'b1;
    end else begin
        sorted_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_124_p2 = (j_fu_44 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bucket_address0 = zext_ln14_2_fu_163_p1;

assign bucket_d0 = sorted_data_load_reg_196;

assign bucket_pointer_d0 = (bucket_pointer_q0 + 32'd1);

assign grp_fu_167_p0 = grp_fu_167_p00;

assign grp_fu_167_p00 = ith_radix_fu_140_p1;

assign grp_fu_167_p1 = 9'd25;

assign grp_fu_167_p2 = bucket_pointer_q0[8:0];

assign icmp_ln11_fu_118_p2 = ((j_fu_44 == 5'd25) ? 1'b1 : 1'b0);

assign ith_radix_fu_140_p1 = shifted_fu_135_p2[3:0];

assign mul_fu_93_p3 = {{i}, {2'd0}};

assign shifted_fu_135_p2 = $signed(sorted_data_q0) >>> zext_ln11_reg_183;

assign sorted_data_address0 = zext_ln11_1_fu_113_p1;

assign zext_ln11_1_fu_113_p1 = j_fu_44;

assign zext_ln11_fu_101_p1 = mul_fu_93_p3;

assign zext_ln14_2_fu_163_p1 = grp_fu_167_p3;

assign zext_ln14_fu_148_p1 = ith_radix_reg_201;

always @ (posedge ap_clk) begin
    zext_ln11_reg_183[1:0] <= 2'b00;
    zext_ln11_reg_183[31:5] <= 27'b000000000000000000000000000;
end

endmodule //radix_sort_separate_bucket_parallel_2_input_bucket_1_1
