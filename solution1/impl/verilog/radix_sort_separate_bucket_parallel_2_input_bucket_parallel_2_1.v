// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module radix_sort_separate_bucket_parallel_2_input_bucket_parallel_2_1 (
        i,
        sorted_data_address0,
        sorted_data_ce0,
        sorted_data_d0,
        sorted_data_q0,
        sorted_data_we0,
        sorted_data_address1,
        sorted_data_ce1,
        sorted_data_d1,
        sorted_data_q1,
        sorted_data_we1,
        bucket1_address0,
        bucket1_ce0,
        bucket1_d0,
        bucket1_q0,
        bucket1_we0,
        bucket1_address1,
        bucket1_ce1,
        bucket1_d1,
        bucket1_q1,
        bucket1_we1,
        bucket_pointer1_address0,
        bucket_pointer1_ce0,
        bucket_pointer1_d0,
        bucket_pointer1_q0,
        bucket_pointer1_we0,
        bucket_pointer1_address1,
        bucket_pointer1_ce1,
        bucket_pointer1_d1,
        bucket_pointer1_q1,
        bucket_pointer1_we1,
        ap_clk,
        ap_rst,
        i_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [2:0] i;
output  [5:0] sorted_data_address0;
output   sorted_data_ce0;
output  [31:0] sorted_data_d0;
input  [31:0] sorted_data_q0;
output   sorted_data_we0;
output  [5:0] sorted_data_address1;
output   sorted_data_ce1;
output  [31:0] sorted_data_d1;
input  [31:0] sorted_data_q1;
output   sorted_data_we1;
output  [8:0] bucket1_address0;
output   bucket1_ce0;
output  [31:0] bucket1_d0;
input  [31:0] bucket1_q0;
output   bucket1_we0;
output  [8:0] bucket1_address1;
output   bucket1_ce1;
output  [31:0] bucket1_d1;
input  [31:0] bucket1_q1;
output   bucket1_we1;
output  [3:0] bucket_pointer1_address0;
output   bucket_pointer1_ce0;
output  [31:0] bucket_pointer1_d0;
input  [31:0] bucket_pointer1_q0;
output   bucket_pointer1_we0;
output  [3:0] bucket_pointer1_address1;
output   bucket_pointer1_ce1;
output  [31:0] bucket_pointer1_d1;
input  [31:0] bucket_pointer1_q1;
output   bucket_pointer1_we1;
input   ap_clk;
input   ap_rst;
input   i_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    input_bucket_1_1_U0_ap_start;
wire    input_bucket_1_1_U0_ap_done;
wire    input_bucket_1_1_U0_ap_continue;
wire    input_bucket_1_1_U0_ap_idle;
wire    input_bucket_1_1_U0_ap_ready;
wire   [5:0] input_bucket_1_1_U0_sorted_data_address0;
wire    input_bucket_1_1_U0_sorted_data_ce0;
wire   [8:0] input_bucket_1_1_U0_bucket_address0;
wire    input_bucket_1_1_U0_bucket_ce0;
wire    input_bucket_1_1_U0_bucket_we0;
wire   [31:0] input_bucket_1_1_U0_bucket_d0;
wire   [3:0] input_bucket_1_1_U0_bucket_pointer_address0;
wire    input_bucket_1_1_U0_bucket_pointer_ce0;
wire    input_bucket_1_1_U0_bucket_pointer_we0;
wire   [31:0] input_bucket_1_1_U0_bucket_pointer_d0;

radix_sort_separate_bucket_parallel_2_input_bucket_1_1 input_bucket_1_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(input_bucket_1_1_U0_ap_start),
    .ap_done(input_bucket_1_1_U0_ap_done),
    .ap_continue(input_bucket_1_1_U0_ap_continue),
    .ap_idle(input_bucket_1_1_U0_ap_idle),
    .ap_ready(input_bucket_1_1_U0_ap_ready),
    .i(i),
    .sorted_data_address0(input_bucket_1_1_U0_sorted_data_address0),
    .sorted_data_ce0(input_bucket_1_1_U0_sorted_data_ce0),
    .sorted_data_q0(sorted_data_q0),
    .bucket_address0(input_bucket_1_1_U0_bucket_address0),
    .bucket_ce0(input_bucket_1_1_U0_bucket_ce0),
    .bucket_we0(input_bucket_1_1_U0_bucket_we0),
    .bucket_d0(input_bucket_1_1_U0_bucket_d0),
    .bucket_pointer_address0(input_bucket_1_1_U0_bucket_pointer_address0),
    .bucket_pointer_ce0(input_bucket_1_1_U0_bucket_pointer_ce0),
    .bucket_pointer_we0(input_bucket_1_1_U0_bucket_pointer_we0),
    .bucket_pointer_d0(input_bucket_1_1_U0_bucket_pointer_d0),
    .bucket_pointer_q0(bucket_pointer1_q0)
);

assign ap_done = input_bucket_1_1_U0_ap_done;

assign ap_idle = input_bucket_1_1_U0_ap_idle;

assign ap_ready = input_bucket_1_1_U0_ap_ready;

assign bucket1_address0 = input_bucket_1_1_U0_bucket_address0;

assign bucket1_address1 = 9'd0;

assign bucket1_ce0 = input_bucket_1_1_U0_bucket_ce0;

assign bucket1_ce1 = 1'b0;

assign bucket1_d0 = input_bucket_1_1_U0_bucket_d0;

assign bucket1_d1 = 32'd0;

assign bucket1_we0 = input_bucket_1_1_U0_bucket_we0;

assign bucket1_we1 = 1'b0;

assign bucket_pointer1_address0 = input_bucket_1_1_U0_bucket_pointer_address0;

assign bucket_pointer1_address1 = 4'd0;

assign bucket_pointer1_ce0 = input_bucket_1_1_U0_bucket_pointer_ce0;

assign bucket_pointer1_ce1 = 1'b0;

assign bucket_pointer1_d0 = input_bucket_1_1_U0_bucket_pointer_d0;

assign bucket_pointer1_d1 = 32'd0;

assign bucket_pointer1_we0 = input_bucket_1_1_U0_bucket_pointer_we0;

assign bucket_pointer1_we1 = 1'b0;

assign input_bucket_1_1_U0_ap_continue = ap_continue;

assign input_bucket_1_1_U0_ap_start = ap_start;

assign sorted_data_address0 = input_bucket_1_1_U0_sorted_data_address0;

assign sorted_data_address1 = 6'd0;

assign sorted_data_ce0 = input_bucket_1_1_U0_sorted_data_ce0;

assign sorted_data_ce1 = 1'b0;

assign sorted_data_d0 = 32'd0;

assign sorted_data_d1 = 32'd0;

assign sorted_data_we0 = 1'b0;

assign sorted_data_we1 = 1'b0;

endmodule //radix_sort_separate_bucket_parallel_2_input_bucket_parallel_2_1
