// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_44_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        j_1,
        input_r_address0,
        input_r_ce0,
        input_r_we0,
        input_r_d0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_we1,
        input_r_d1,
        input_r_q1,
        zext_ln79_1,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [22:0] j_1;
output  [22:0] input_r_address0;
output   input_r_ce0;
output   input_r_we0;
output  [31:0] input_r_d0;
input  [31:0] input_r_q0;
output  [22:0] input_r_address1;
output   input_r_ce1;
output   input_r_we1;
output  [31:0] input_r_d1;
input  [31:0] input_r_q1;
input  [22:0] zext_ln79_1;
output  [0:0] ap_return;

reg ap_idle;
reg[22:0] input_r_address0;
reg input_r_ce0;
reg input_r_we0;
reg[22:0] input_r_address1;
reg input_r_ce1;
reg input_r_we1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire   [0:0] icmp_ln58_fu_241_p2;
reg   [0:0] icmp_ln44_reg_292;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg   [0:0] merge_reg_118;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln79_1_cast_fu_133_p1;
reg   [31:0] zext_ln79_1_cast_reg_279;
reg   [31:0] grp_load_fu_130_p1;
reg   [31:0] largest_1_reg_285;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln44_fu_150_p2;
wire   [22:0] add_ln44_fu_155_p2;
reg   [22:0] add_ln44_reg_296;
wire   [31:0] left_fu_167_p2;
reg   [31:0] left_reg_301;
wire   [31:0] right_fu_173_p2;
reg   [31:0] right_reg_306;
wire   [0:0] icmp_ln50_fu_184_p2;
reg   [0:0] icmp_ln50_reg_313;
wire   [0:0] icmp_ln54_fu_215_p2;
reg   [0:0] icmp_ln54_reg_327;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] largest_load_reg_331;
reg   [0:0] icmp_ln58_reg_346;
wire    ap_block_pp0_stage3_11001;
reg   [22:0] input_r_addr_4_reg_350;
reg   [22:0] input_r_addr_5_reg_356;
reg   [31:0] temp_reg_362;
wire    ap_block_pp0_stage4_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_merge_phi_fu_122_p4;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln50_fu_179_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln50_1_fu_189_p1;
wire   [63:0] zext_ln54_fu_211_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln54_1_fu_219_p1;
wire   [63:0] zext_ln62_fu_246_p1;
wire   [63:0] zext_ln62_1_fu_250_p1;
reg   [22:0] loop_iter_2_fu_40;
wire    ap_loop_init;
reg   [31:0] largest_fu_44;
wire   [31:0] select_ln54_fu_230_p3;
wire   [31:0] select_ln50_fu_200_p3;
reg   [31:0] ap_sig_allocacmp_largest_2;
reg   [31:0] ap_sig_allocacmp_largest_load;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage0;
wire   [31:0] shl_ln46_fu_161_p2;
wire   [0:0] icmp_ln50_1_fu_194_p2;
wire   [0:0] icmp_ln54_1_fu_224_p2;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_375;
reg    ap_condition_379;
reg    ap_condition_385;
reg    ap_condition_389;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

single_heap_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & ((icmp_ln44_reg_292 == 1'd0) | (icmp_ln58_fu_241_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_merge_phi_fu_122_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        largest_fu_44 <= 32'd0;
    end else if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln50_reg_313 == 1'd1))) begin
        largest_fu_44 <= select_ln50_fu_200_p3;
    end else if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln54_reg_327 == 1'd1))) begin
        largest_fu_44 <= select_ln54_fu_230_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_iter_2_fu_40 <= 23'd0;
    end else if (((icmp_ln44_reg_292 == 1'd1) & (icmp_ln58_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        loop_iter_2_fu_40 <= add_ln44_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_389)) begin
            merge_reg_118 <= 1'd0;
        end else if ((1'b1 == ap_condition_385)) begin
            merge_reg_118 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln44_reg_296 <= add_ln44_fu_155_p2;
        icmp_ln44_reg_292 <= icmp_ln44_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_150_p2 == 1'd1))) begin
        icmp_ln50_reg_313 <= icmp_ln50_fu_184_p2;
        left_reg_301[31 : 1] <= left_fu_167_p2[31 : 1];
        right_reg_306[31 : 1] <= right_fu_173_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln54_reg_327 <= icmp_ln54_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln58_reg_346 <= icmp_ln58_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (icmp_ln58_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_addr_4_reg_350 <= zext_ln62_fu_246_p1;
        input_r_addr_5_reg_356 <= zext_ln62_1_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        largest_1_reg_285 <= grp_load_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln54_fu_215_p2 == 1'd1))) begin
        largest_load_reg_331 <= grp_load_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln58_reg_346 == 1'd0))) begin
        temp_reg_362 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln79_1_cast_reg_279[22 : 0] <= zext_ln79_1_cast_fu_133_p1[22 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & ((icmp_ln44_reg_292 == 1'd0) | (icmp_ln58_fu_241_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (icmp_ln58_fu_241_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_phi_mux_merge_phi_fu_122_p4 = 1'd0;
    end else begin
        ap_phi_mux_merge_phi_fu_122_p4 = merge_reg_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & ((icmp_ln44_reg_292 == 1'd0) | (icmp_ln58_fu_241_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_merge_phi_fu_122_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln54_reg_327 == 1'd1))) begin
        ap_sig_allocacmp_largest_2 = select_ln54_fu_230_p3;
    end else begin
        ap_sig_allocacmp_largest_2 = largest_fu_44;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln50_reg_313 == 1'd1))) begin
        ap_sig_allocacmp_largest_load = select_ln50_fu_200_p3;
    end else begin
        ap_sig_allocacmp_largest_load = largest_fu_44;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_379)) begin
            grp_load_fu_130_p1 = ap_sig_allocacmp_largest_2;
        end else if ((1'b1 == ap_condition_375)) begin
            grp_load_fu_130_p1 = ap_sig_allocacmp_largest_load;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_load_fu_130_p1 = largest_fu_44;
        end else begin
            grp_load_fu_130_p1 = 'bx;
        end
    end else begin
        grp_load_fu_130_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = input_r_addr_5_reg_356;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln62_fu_246_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln54_fu_211_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln50_1_fu_189_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = input_r_addr_4_reg_350;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln62_1_fu_250_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln54_1_fu_219_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln50_fu_179_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_346 == 1'd0))) begin
        input_r_we0 = 1'b1;
    end else begin
        input_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln58_reg_346 == 1'd0))) begin
        input_r_we1 = 1'b1;
    end else begin
        input_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_155_p2 = (loop_iter_2_fu_40 + 23'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_375 = ((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln54_fu_215_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_379 = ((icmp_ln44_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_385 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_150_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_389 = ((icmp_ln44_reg_292 == 1'd1) & (icmp_ln58_fu_241_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign icmp_ln44_fu_150_p2 = ((loop_iter_2_fu_40 < j_1) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_194_p2 = (($signed(input_r_q1) > $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_184_p2 = (($signed(zext_ln79_1_cast_reg_279) > $signed(left_fu_167_p2)) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_224_p2 = (($signed(input_r_q0) > $signed(input_r_q1)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_215_p2 = (($signed(zext_ln79_1_cast_reg_279) > $signed(right_reg_306)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_241_p2 = ((grp_load_fu_130_p1 == largest_1_reg_285) ? 1'b1 : 1'b0);

assign input_r_d0 = temp_reg_362;

assign input_r_d1 = input_r_q1;

assign left_fu_167_p2 = (shl_ln46_fu_161_p2 | 32'd1);

assign right_fu_173_p2 = (shl_ln46_fu_161_p2 + 32'd2);

assign select_ln50_fu_200_p3 = ((icmp_ln50_1_fu_194_p2[0:0] == 1'b1) ? left_reg_301 : largest_1_reg_285);

assign select_ln54_fu_230_p3 = ((icmp_ln54_1_fu_224_p2[0:0] == 1'b1) ? right_reg_306 : largest_load_reg_331);

assign shl_ln46_fu_161_p2 = grp_load_fu_130_p1 << 32'd1;

assign zext_ln50_1_fu_189_p1 = grp_load_fu_130_p1;

assign zext_ln50_fu_179_p1 = left_fu_167_p2;

assign zext_ln54_1_fu_219_p1 = grp_load_fu_130_p1;

assign zext_ln54_fu_211_p1 = right_reg_306;

assign zext_ln62_1_fu_250_p1 = grp_load_fu_130_p1;

assign zext_ln62_fu_246_p1 = largest_1_reg_285;

assign zext_ln79_1_cast_fu_133_p1 = zext_ln79_1;

always @ (posedge ap_clk) begin
    zext_ln79_1_cast_reg_279[31:23] <= 9'b000000000;
    left_reg_301[0] <= 1'b1;
    right_reg_306[0] <= 1'b0;
end

endmodule //single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_44_11
