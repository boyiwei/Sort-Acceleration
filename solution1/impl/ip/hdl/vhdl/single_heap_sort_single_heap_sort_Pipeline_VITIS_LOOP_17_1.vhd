-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_17_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln54 : IN STD_LOGIC_VECTOR (18 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_we0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_we1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of single_heap_sort_single_heap_sort_Pipeline_VITIS_LOOP_17_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F4240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011110100001001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln31_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal grp_load_fu_100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal left_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal largest_2_load_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_addr_reg_265 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_r_addr_6_reg_271 : STD_LOGIC_VECTOR (19 downto 0);
    signal temp_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal zext_ln23_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal largest_2_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_fu_177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln23_fu_152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_cast_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_largest_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_largest_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_largest : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln19_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component single_heap_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component single_heap_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    largest_2_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                largest_2_fu_32 <= zext_ln54_cast_fu_109_p1;
            elsif (((icmp_ln23_reg_229 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                largest_2_fu_32 <= select_ln23_fu_152_p3;
            elsif (((icmp_ln27_reg_243 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                largest_2_fu_32 <= select_ln27_fu_177_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln23_reg_229 <= icmp_ln23_fu_136_p2;
                largest_reg_210 <= grp_load_fu_100_p1;
                    left_reg_217(31 downto 1) <= left_fu_124_p2(31 downto 1);
                    right_reg_222(31 downto 1) <= right_fu_130_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln27_reg_243 <= icmp_ln27_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                input_r_addr_6_reg_271 <= zext_ln35_1_fu_197_p1(20 - 1 downto 0);
                input_r_addr_reg_265 <= zext_ln35_fu_193_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                largest_2_load_reg_247 <= grp_load_fu_100_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                temp_reg_277 <= input_r_q1;
            end if;
        end if;
    end process;
    left_reg_217(0) <= '1';
    right_reg_222(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_188_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln31_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_state3, icmp_ln31_fu_188_p2)
    begin
        if (((icmp_ln31_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state3, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_largest_assign_proc : process(ap_CS_fsm_state1, largest_2_fu_32, zext_ln54_cast_fu_109_p1, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_largest <= zext_ln54_cast_fu_109_p1;
        else 
            ap_sig_allocacmp_largest <= largest_2_fu_32;
        end if; 
    end process;


    ap_sig_allocacmp_largest_2_load_assign_proc : process(icmp_ln23_reg_229, ap_CS_fsm_state2, largest_2_fu_32, select_ln23_fu_152_p3)
    begin
        if (((icmp_ln23_reg_229 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_sig_allocacmp_largest_2_load <= select_ln23_fu_152_p3;
        else 
            ap_sig_allocacmp_largest_2_load <= largest_2_fu_32;
        end if; 
    end process;


    ap_sig_allocacmp_largest_3_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_reg_243, largest_2_fu_32, select_ln27_fu_177_p3)
    begin
        if (((icmp_ln27_reg_243 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_sig_allocacmp_largest_3 <= select_ln27_fu_177_p3;
        else 
            ap_sig_allocacmp_largest_3 <= largest_2_fu_32;
        end if; 
    end process;

    grp_fu_103_p2 <= "1" when (signed(input_r_q1) > signed(input_r_q0)) else "0";

    grp_load_fu_100_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln27_fu_163_p2, ap_CS_fsm_state2, ap_sig_allocacmp_largest_3, ap_sig_allocacmp_largest_2_load, ap_sig_allocacmp_largest)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_load_fu_100_p1 <= ap_sig_allocacmp_largest_3;
        elsif (((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_load_fu_100_p1 <= ap_sig_allocacmp_largest_2_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_load_fu_100_p1 <= ap_sig_allocacmp_largest;
        else 
            grp_load_fu_100_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln23_fu_136_p2 <= "1" when (signed(left_fu_124_p2) < signed(ap_const_lv32_F4240)) else "0";
    icmp_ln27_fu_163_p2 <= "1" when (signed(right_reg_222) < signed(ap_const_lv32_F4240)) else "0";
    icmp_ln31_fu_188_p2 <= "1" when (grp_load_fu_100_p1 = largest_reg_210) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_188_p2, icmp_ln23_fu_136_p2, icmp_ln27_fu_163_p2, ap_CS_fsm_state2, input_r_addr_reg_265, ap_CS_fsm_state4, zext_ln23_1_fu_147_p1, zext_ln27_1_fu_172_p1, zext_ln35_1_fu_197_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= input_r_addr_reg_265;
        elsif (((icmp_ln31_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_r_address0 <= zext_ln35_1_fu_197_p1(20 - 1 downto 0);
        elsif (((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_address0 <= zext_ln27_1_fu_172_p1(20 - 1 downto 0);
        elsif (((icmp_ln23_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_r_address0 <= zext_ln23_1_fu_147_p1(20 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_188_p2, ap_CS_fsm_state5, icmp_ln23_fu_136_p2, icmp_ln27_fu_163_p2, ap_CS_fsm_state2, input_r_addr_6_reg_271, zext_ln23_fu_142_p1, zext_ln27_fu_168_p1, zext_ln35_fu_193_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= input_r_addr_6_reg_271;
        elsif (((icmp_ln31_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_r_address1 <= zext_ln35_fu_193_p1(20 - 1 downto 0);
        elsif (((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_address1 <= zext_ln27_fu_168_p1(20 - 1 downto 0);
        elsif (((icmp_ln23_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_r_address1 <= zext_ln23_fu_142_p1(20 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_188_p2, icmp_ln23_fu_136_p2, icmp_ln27_fu_163_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln31_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln23_fu_136_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_188_p2, ap_CS_fsm_state5, icmp_ln23_fu_136_p2, icmp_ln27_fu_163_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln31_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln27_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln23_fu_136_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_d0 <= input_r_q0;
    input_r_d1 <= temp_reg_277;

    input_r_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_we0 <= ap_const_logic_1;
        else 
            input_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_we1 <= ap_const_logic_1;
        else 
            input_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    left_fu_124_p2 <= (shl_ln19_fu_118_p2 or ap_const_lv32_1);
    right_fu_130_p2 <= std_logic_vector(unsigned(shl_ln19_fu_118_p2) + unsigned(ap_const_lv32_2));
    select_ln23_fu_152_p3 <= 
        left_reg_217 when (grp_fu_103_p2(0) = '1') else 
        largest_reg_210;
    select_ln27_fu_177_p3 <= 
        right_reg_222 when (grp_fu_103_p2(0) = '1') else 
        largest_2_load_reg_247;
    shl_ln19_fu_118_p2 <= std_logic_vector(shift_left(unsigned(grp_load_fu_100_p1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    zext_ln23_1_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_load_fu_100_p1),64));
    zext_ln23_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(left_fu_124_p2),64));
    zext_ln27_1_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_load_fu_100_p1),64));
    zext_ln27_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(right_reg_222),64));
    zext_ln35_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_load_fu_100_p1),64));
    zext_ln35_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(largest_reg_210),64));
    zext_ln54_cast_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln54),32));
end behav;
