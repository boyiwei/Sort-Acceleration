-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    input_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we1 : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_we0 : OUT STD_LOGIC;
    output_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of sort_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sort_top_sort_top,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.366000,HLS_SYN_LAT=8500257,HLS_SYN_TPT=8500258,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=1355,HLS_SYN_LUT=3076,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal half_sorted0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal half_sorted0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal half_sorted1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal half_sorted1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal radix_sort_unified_bucket_1_1_U0_ap_start : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_ap_done : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_ap_continue : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_ap_idle : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_ap_ready : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_input_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal radix_sort_unified_bucket_1_1_U0_input_r_ce0 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_sorted_data_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal radix_sort_unified_bucket_1_1_U0_sorted_data_ce0 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_sorted_data_we0 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_1_U0_sorted_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal radix_sort_unified_bucket_1_2_U0_ap_start : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_ap_done : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_ap_continue : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_ap_idle : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_ap_ready : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_input_r_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal radix_sort_unified_bucket_1_2_U0_input_r_ce1 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_sorted_data_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal radix_sort_unified_bucket_1_2_U0_sorted_data_ce0 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_sorted_data_we0 : STD_LOGIC;
    signal radix_sort_unified_bucket_1_2_U0_sorted_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal merge_sort_1_U0_ap_start : STD_LOGIC;
    signal merge_sort_1_U0_ap_done : STD_LOGIC;
    signal merge_sort_1_U0_ap_continue : STD_LOGIC;
    signal merge_sort_1_U0_ap_idle : STD_LOGIC;
    signal merge_sort_1_U0_ap_ready : STD_LOGIC;
    signal merge_sort_1_U0_input1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal merge_sort_1_U0_input1_ce0 : STD_LOGIC;
    signal merge_sort_1_U0_input2_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal merge_sort_1_U0_input2_ce0 : STD_LOGIC;
    signal merge_sort_1_U0_output_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal merge_sort_1_U0_output_r_ce0 : STD_LOGIC;
    signal merge_sort_1_U0_output_r_we0 : STD_LOGIC;
    signal merge_sort_1_U0_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal half_sorted0_i_full_n : STD_LOGIC;
    signal half_sorted0_t_empty_n : STD_LOGIC;
    signal half_sorted1_i_full_n : STD_LOGIC;
    signal half_sorted1_t_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_radix_sort_unified_bucket_1_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_radix_sort_unified_bucket_1_2_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sort_top_radix_sort_unified_bucket_1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sorted_data_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        sorted_data_ce0 : OUT STD_LOGIC;
        sorted_data_we0 : OUT STD_LOGIC;
        sorted_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_top_radix_sort_unified_bucket_1_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sorted_data_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        sorted_data_ce0 : OUT STD_LOGIC;
        sorted_data_we0 : OUT STD_LOGIC;
        sorted_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_top_merge_sort_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input1_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        input1_ce0 : OUT STD_LOGIC;
        input1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input2_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        input2_ce0 : OUT STD_LOGIC;
        input2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_top_half_sorted0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    half_sorted0_U : component sort_top_half_sorted0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => radix_sort_unified_bucket_1_1_U0_sorted_data_address0,
        i_ce0 => radix_sort_unified_bucket_1_1_U0_sorted_data_ce0,
        i_we0 => radix_sort_unified_bucket_1_1_U0_sorted_data_we0,
        i_d0 => radix_sort_unified_bucket_1_1_U0_sorted_data_d0,
        i_q0 => half_sorted0_i_q0,
        t_address0 => merge_sort_1_U0_input1_address0,
        t_ce0 => merge_sort_1_U0_input1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => half_sorted0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => half_sorted0_i_full_n,
        i_write => radix_sort_unified_bucket_1_1_U0_ap_done,
        t_empty_n => half_sorted0_t_empty_n,
        t_read => merge_sort_1_U0_ap_ready);

    half_sorted1_U : component sort_top_half_sorted0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => radix_sort_unified_bucket_1_2_U0_sorted_data_address0,
        i_ce0 => radix_sort_unified_bucket_1_2_U0_sorted_data_ce0,
        i_we0 => radix_sort_unified_bucket_1_2_U0_sorted_data_we0,
        i_d0 => radix_sort_unified_bucket_1_2_U0_sorted_data_d0,
        i_q0 => half_sorted1_i_q0,
        t_address0 => merge_sort_1_U0_input2_address0,
        t_ce0 => merge_sort_1_U0_input2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => half_sorted1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => half_sorted1_i_full_n,
        i_write => radix_sort_unified_bucket_1_2_U0_ap_done,
        t_empty_n => half_sorted1_t_empty_n,
        t_read => merge_sort_1_U0_ap_ready);

    radix_sort_unified_bucket_1_1_U0 : component sort_top_radix_sort_unified_bucket_1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => radix_sort_unified_bucket_1_1_U0_ap_start,
        ap_done => radix_sort_unified_bucket_1_1_U0_ap_done,
        ap_continue => radix_sort_unified_bucket_1_1_U0_ap_continue,
        ap_idle => radix_sort_unified_bucket_1_1_U0_ap_idle,
        ap_ready => radix_sort_unified_bucket_1_1_U0_ap_ready,
        input_r_address0 => radix_sort_unified_bucket_1_1_U0_input_r_address0,
        input_r_ce0 => radix_sort_unified_bucket_1_1_U0_input_r_ce0,
        input_r_q0 => input_r_q0,
        sorted_data_address0 => radix_sort_unified_bucket_1_1_U0_sorted_data_address0,
        sorted_data_ce0 => radix_sort_unified_bucket_1_1_U0_sorted_data_ce0,
        sorted_data_we0 => radix_sort_unified_bucket_1_1_U0_sorted_data_we0,
        sorted_data_d0 => radix_sort_unified_bucket_1_1_U0_sorted_data_d0,
        sorted_data_q0 => half_sorted0_i_q0);

    radix_sort_unified_bucket_1_2_U0 : component sort_top_radix_sort_unified_bucket_1_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => radix_sort_unified_bucket_1_2_U0_ap_start,
        ap_done => radix_sort_unified_bucket_1_2_U0_ap_done,
        ap_continue => radix_sort_unified_bucket_1_2_U0_ap_continue,
        ap_idle => radix_sort_unified_bucket_1_2_U0_ap_idle,
        ap_ready => radix_sort_unified_bucket_1_2_U0_ap_ready,
        input_r_address1 => radix_sort_unified_bucket_1_2_U0_input_r_address1,
        input_r_ce1 => radix_sort_unified_bucket_1_2_U0_input_r_ce1,
        input_r_q1 => input_r_q1,
        sorted_data_address0 => radix_sort_unified_bucket_1_2_U0_sorted_data_address0,
        sorted_data_ce0 => radix_sort_unified_bucket_1_2_U0_sorted_data_ce0,
        sorted_data_we0 => radix_sort_unified_bucket_1_2_U0_sorted_data_we0,
        sorted_data_d0 => radix_sort_unified_bucket_1_2_U0_sorted_data_d0,
        sorted_data_q0 => half_sorted1_i_q0);

    merge_sort_1_U0 : component sort_top_merge_sort_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => merge_sort_1_U0_ap_start,
        ap_done => merge_sort_1_U0_ap_done,
        ap_continue => merge_sort_1_U0_ap_continue,
        ap_idle => merge_sort_1_U0_ap_idle,
        ap_ready => merge_sort_1_U0_ap_ready,
        input1_address0 => merge_sort_1_U0_input1_address0,
        input1_ce0 => merge_sort_1_U0_input1_ce0,
        input1_q0 => half_sorted0_t_q0,
        input2_address0 => merge_sort_1_U0_input2_address0,
        input2_ce0 => merge_sort_1_U0_input2_ce0,
        input2_q0 => half_sorted1_t_q0,
        output_r_address0 => merge_sort_1_U0_output_r_address0,
        output_r_ce0 => merge_sort_1_U0_output_r_ce0,
        output_r_we0 => merge_sort_1_U0_output_r_we0,
        output_r_d0 => merge_sort_1_U0_output_r_d0);





    ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready <= ap_sync_radix_sort_unified_bucket_1_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready <= ap_sync_radix_sort_unified_bucket_1_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= merge_sort_1_U0_ap_done;
    ap_idle <= (radix_sort_unified_bucket_1_2_U0_ap_idle and radix_sort_unified_bucket_1_1_U0_ap_idle and merge_sort_1_U0_ap_idle and (half_sorted1_t_empty_n xor ap_const_logic_1) and (half_sorted0_t_empty_n xor ap_const_logic_1));
    ap_ready <= ap_sync_ready;
    ap_sync_radix_sort_unified_bucket_1_1_U0_ap_ready <= (radix_sort_unified_bucket_1_1_U0_ap_ready or ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready);
    ap_sync_radix_sort_unified_bucket_1_2_U0_ap_ready <= (radix_sort_unified_bucket_1_2_U0_ap_ready or ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready);
    ap_sync_ready <= (ap_sync_radix_sort_unified_bucket_1_2_U0_ap_ready and ap_sync_radix_sort_unified_bucket_1_1_U0_ap_ready);
    input_r_address0 <= radix_sort_unified_bucket_1_1_U0_input_r_address0;
    input_r_address1 <= radix_sort_unified_bucket_1_2_U0_input_r_address1;
    input_r_ce0 <= radix_sort_unified_bucket_1_1_U0_input_r_ce0;
    input_r_ce1 <= radix_sort_unified_bucket_1_2_U0_input_r_ce1;
    input_r_d0 <= ap_const_lv32_0;
    input_r_d1 <= ap_const_lv32_0;
    input_r_we0 <= ap_const_logic_0;
    input_r_we1 <= ap_const_logic_0;
    merge_sort_1_U0_ap_continue <= ap_const_logic_1;
    merge_sort_1_U0_ap_start <= (half_sorted1_t_empty_n and half_sorted0_t_empty_n);
    output_r_address0 <= merge_sort_1_U0_output_r_address0;
    output_r_address1 <= ap_const_lv20_0;
    output_r_ce0 <= merge_sort_1_U0_output_r_ce0;
    output_r_ce1 <= ap_const_logic_0;
    output_r_d0 <= merge_sort_1_U0_output_r_d0;
    output_r_d1 <= ap_const_lv32_0;
    output_r_we0 <= merge_sort_1_U0_output_r_we0;
    output_r_we1 <= ap_const_logic_0;
    radix_sort_unified_bucket_1_1_U0_ap_continue <= half_sorted0_i_full_n;
    radix_sort_unified_bucket_1_1_U0_ap_start <= ((ap_sync_reg_radix_sort_unified_bucket_1_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    radix_sort_unified_bucket_1_2_U0_ap_continue <= half_sorted1_i_full_n;
    radix_sort_unified_bucket_1_2_U0_ap_start <= ((ap_sync_reg_radix_sort_unified_bucket_1_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
