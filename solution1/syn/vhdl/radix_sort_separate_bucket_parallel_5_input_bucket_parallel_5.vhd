-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity radix_sort_separate_bucket_parallel_5_input_bucket_parallel_5 is
port (
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    sorted_data0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data0_ce0 : OUT STD_LOGIC;
    sorted_data0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data0_we0 : OUT STD_LOGIC;
    sorted_data0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data0_ce1 : OUT STD_LOGIC;
    sorted_data0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data0_we1 : OUT STD_LOGIC;
    sorted_data1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data1_ce0 : OUT STD_LOGIC;
    sorted_data1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data1_we0 : OUT STD_LOGIC;
    sorted_data1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data1_ce1 : OUT STD_LOGIC;
    sorted_data1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data1_we1 : OUT STD_LOGIC;
    sorted_data2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data2_ce0 : OUT STD_LOGIC;
    sorted_data2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data2_we0 : OUT STD_LOGIC;
    sorted_data2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_data2_ce1 : OUT STD_LOGIC;
    sorted_data2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sorted_data2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sorted_data2_we1 : OUT STD_LOGIC;
    bucket0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket0_ce0 : OUT STD_LOGIC;
    bucket0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket0_we0 : OUT STD_LOGIC;
    bucket0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket0_ce1 : OUT STD_LOGIC;
    bucket0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket0_we1 : OUT STD_LOGIC;
    bucket1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket1_ce0 : OUT STD_LOGIC;
    bucket1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket1_we0 : OUT STD_LOGIC;
    bucket1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket1_ce1 : OUT STD_LOGIC;
    bucket1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket1_we1 : OUT STD_LOGIC;
    bucket2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket2_ce0 : OUT STD_LOGIC;
    bucket2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket2_we0 : OUT STD_LOGIC;
    bucket2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bucket2_ce1 : OUT STD_LOGIC;
    bucket2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket2_we1 : OUT STD_LOGIC;
    bucket_pointer0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer0_ce0 : OUT STD_LOGIC;
    bucket_pointer0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer0_we0 : OUT STD_LOGIC;
    bucket_pointer0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer0_ce1 : OUT STD_LOGIC;
    bucket_pointer0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer0_we1 : OUT STD_LOGIC;
    bucket_pointer1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer1_ce0 : OUT STD_LOGIC;
    bucket_pointer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer1_we0 : OUT STD_LOGIC;
    bucket_pointer1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer1_ce1 : OUT STD_LOGIC;
    bucket_pointer1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer1_we1 : OUT STD_LOGIC;
    bucket_pointer2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer2_ce0 : OUT STD_LOGIC;
    bucket_pointer2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer2_we0 : OUT STD_LOGIC;
    bucket_pointer2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bucket_pointer2_ce1 : OUT STD_LOGIC;
    bucket_pointer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_pointer2_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    i_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of radix_sort_separate_bucket_parallel_5_input_bucket_parallel_5 is 
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal input_bucket_5_1_U0_ap_start : STD_LOGIC;
    signal input_bucket_5_1_U0_ap_done : STD_LOGIC;
    signal input_bucket_5_1_U0_ap_continue : STD_LOGIC;
    signal input_bucket_5_1_U0_ap_idle : STD_LOGIC;
    signal input_bucket_5_1_U0_ap_ready : STD_LOGIC;
    signal input_bucket_5_1_U0_sorted_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_1_U0_sorted_data_ce0 : STD_LOGIC;
    signal input_bucket_5_1_U0_bucket_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_bucket_5_1_U0_bucket_ce0 : STD_LOGIC;
    signal input_bucket_5_1_U0_bucket_we0 : STD_LOGIC;
    signal input_bucket_5_1_U0_bucket_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_bucket_5_1_U0_bucket_pointer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_1_U0_bucket_pointer_ce0 : STD_LOGIC;
    signal input_bucket_5_1_U0_bucket_pointer_we0 : STD_LOGIC;
    signal input_bucket_5_1_U0_bucket_pointer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal input_bucket_5_2_U0_ap_start : STD_LOGIC;
    signal input_bucket_5_2_U0_ap_done : STD_LOGIC;
    signal input_bucket_5_2_U0_ap_continue : STD_LOGIC;
    signal input_bucket_5_2_U0_ap_idle : STD_LOGIC;
    signal input_bucket_5_2_U0_ap_ready : STD_LOGIC;
    signal input_bucket_5_2_U0_sorted_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_2_U0_sorted_data_ce0 : STD_LOGIC;
    signal input_bucket_5_2_U0_bucket_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_bucket_5_2_U0_bucket_ce0 : STD_LOGIC;
    signal input_bucket_5_2_U0_bucket_we0 : STD_LOGIC;
    signal input_bucket_5_2_U0_bucket_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_bucket_5_2_U0_bucket_pointer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_2_U0_bucket_pointer_ce0 : STD_LOGIC;
    signal input_bucket_5_2_U0_bucket_pointer_we0 : STD_LOGIC;
    signal input_bucket_5_2_U0_bucket_pointer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_bucket_5_3_U0_ap_start : STD_LOGIC;
    signal input_bucket_5_3_U0_ap_done : STD_LOGIC;
    signal input_bucket_5_3_U0_ap_continue : STD_LOGIC;
    signal input_bucket_5_3_U0_ap_idle : STD_LOGIC;
    signal input_bucket_5_3_U0_ap_ready : STD_LOGIC;
    signal input_bucket_5_3_U0_sorted_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_3_U0_sorted_data_ce0 : STD_LOGIC;
    signal input_bucket_5_3_U0_bucket_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_bucket_5_3_U0_bucket_ce0 : STD_LOGIC;
    signal input_bucket_5_3_U0_bucket_we0 : STD_LOGIC;
    signal input_bucket_5_3_U0_bucket_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_bucket_5_3_U0_bucket_pointer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_bucket_5_3_U0_bucket_pointer_ce0 : STD_LOGIC;
    signal input_bucket_5_3_U0_bucket_pointer_we0 : STD_LOGIC;
    signal input_bucket_5_3_U0_bucket_pointer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_input_bucket_5_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_input_bucket_5_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_input_bucket_5_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_input_bucket_5_2_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_input_bucket_5_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_input_bucket_5_3_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component radix_sort_separate_bucket_parallel_5_input_bucket_5_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        sorted_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sorted_data_ce0 : OUT STD_LOGIC;
        sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bucket_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bucket_ce0 : OUT STD_LOGIC;
        bucket_we0 : OUT STD_LOGIC;
        bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bucket_pointer_ce0 : OUT STD_LOGIC;
        bucket_pointer_we0 : OUT STD_LOGIC;
        bucket_pointer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component radix_sort_separate_bucket_parallel_5_input_bucket_5_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        sorted_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sorted_data_ce0 : OUT STD_LOGIC;
        sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bucket_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bucket_ce0 : OUT STD_LOGIC;
        bucket_we0 : OUT STD_LOGIC;
        bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bucket_pointer_ce0 : OUT STD_LOGIC;
        bucket_pointer_we0 : OUT STD_LOGIC;
        bucket_pointer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component radix_sort_separate_bucket_parallel_5_input_bucket_5_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        sorted_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sorted_data_ce0 : OUT STD_LOGIC;
        sorted_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bucket_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bucket_ce0 : OUT STD_LOGIC;
        bucket_we0 : OUT STD_LOGIC;
        bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bucket_pointer_ce0 : OUT STD_LOGIC;
        bucket_pointer_we0 : OUT STD_LOGIC;
        bucket_pointer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bucket_pointer_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_bucket_5_1_U0 : component radix_sort_separate_bucket_parallel_5_input_bucket_5_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => input_bucket_5_1_U0_ap_start,
        ap_done => input_bucket_5_1_U0_ap_done,
        ap_continue => input_bucket_5_1_U0_ap_continue,
        ap_idle => input_bucket_5_1_U0_ap_idle,
        ap_ready => input_bucket_5_1_U0_ap_ready,
        i => i,
        sorted_data_address0 => input_bucket_5_1_U0_sorted_data_address0,
        sorted_data_ce0 => input_bucket_5_1_U0_sorted_data_ce0,
        sorted_data_q0 => sorted_data0_q0,
        bucket_address0 => input_bucket_5_1_U0_bucket_address0,
        bucket_ce0 => input_bucket_5_1_U0_bucket_ce0,
        bucket_we0 => input_bucket_5_1_U0_bucket_we0,
        bucket_d0 => input_bucket_5_1_U0_bucket_d0,
        bucket_pointer_address0 => input_bucket_5_1_U0_bucket_pointer_address0,
        bucket_pointer_ce0 => input_bucket_5_1_U0_bucket_pointer_ce0,
        bucket_pointer_we0 => input_bucket_5_1_U0_bucket_pointer_we0,
        bucket_pointer_d0 => input_bucket_5_1_U0_bucket_pointer_d0,
        bucket_pointer_q0 => bucket_pointer0_q0);

    input_bucket_5_2_U0 : component radix_sort_separate_bucket_parallel_5_input_bucket_5_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => input_bucket_5_2_U0_ap_start,
        ap_done => input_bucket_5_2_U0_ap_done,
        ap_continue => input_bucket_5_2_U0_ap_continue,
        ap_idle => input_bucket_5_2_U0_ap_idle,
        ap_ready => input_bucket_5_2_U0_ap_ready,
        i => i,
        sorted_data_address0 => input_bucket_5_2_U0_sorted_data_address0,
        sorted_data_ce0 => input_bucket_5_2_U0_sorted_data_ce0,
        sorted_data_q0 => sorted_data1_q0,
        bucket_address0 => input_bucket_5_2_U0_bucket_address0,
        bucket_ce0 => input_bucket_5_2_U0_bucket_ce0,
        bucket_we0 => input_bucket_5_2_U0_bucket_we0,
        bucket_d0 => input_bucket_5_2_U0_bucket_d0,
        bucket_pointer_address0 => input_bucket_5_2_U0_bucket_pointer_address0,
        bucket_pointer_ce0 => input_bucket_5_2_U0_bucket_pointer_ce0,
        bucket_pointer_we0 => input_bucket_5_2_U0_bucket_pointer_we0,
        bucket_pointer_d0 => input_bucket_5_2_U0_bucket_pointer_d0,
        bucket_pointer_q0 => bucket_pointer1_q0);

    input_bucket_5_3_U0 : component radix_sort_separate_bucket_parallel_5_input_bucket_5_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => input_bucket_5_3_U0_ap_start,
        ap_done => input_bucket_5_3_U0_ap_done,
        ap_continue => input_bucket_5_3_U0_ap_continue,
        ap_idle => input_bucket_5_3_U0_ap_idle,
        ap_ready => input_bucket_5_3_U0_ap_ready,
        i => i,
        sorted_data_address0 => input_bucket_5_3_U0_sorted_data_address0,
        sorted_data_ce0 => input_bucket_5_3_U0_sorted_data_ce0,
        sorted_data_q0 => sorted_data2_q0,
        bucket_address0 => input_bucket_5_3_U0_bucket_address0,
        bucket_ce0 => input_bucket_5_3_U0_bucket_ce0,
        bucket_we0 => input_bucket_5_3_U0_bucket_we0,
        bucket_d0 => input_bucket_5_3_U0_bucket_d0,
        bucket_pointer_address0 => input_bucket_5_3_U0_bucket_pointer_address0,
        bucket_pointer_ce0 => input_bucket_5_3_U0_bucket_pointer_ce0,
        bucket_pointer_we0 => input_bucket_5_3_U0_bucket_pointer_we0,
        bucket_pointer_d0 => input_bucket_5_3_U0_bucket_pointer_d0,
        bucket_pointer_q0 => bucket_pointer2_q0);





    ap_sync_reg_input_bucket_5_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_input_bucket_5_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_input_bucket_5_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_input_bucket_5_1_U0_ap_ready <= ap_sync_input_bucket_5_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_input_bucket_5_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_input_bucket_5_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_input_bucket_5_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_input_bucket_5_2_U0_ap_ready <= ap_sync_input_bucket_5_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_input_bucket_5_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_input_bucket_5_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_input_bucket_5_3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_input_bucket_5_3_U0_ap_ready <= ap_sync_input_bucket_5_3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (input_bucket_5_3_U0_ap_idle and input_bucket_5_2_U0_ap_idle and input_bucket_5_1_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (input_bucket_5_3_U0_ap_done and input_bucket_5_2_U0_ap_done and input_bucket_5_1_U0_ap_done);
    ap_sync_input_bucket_5_1_U0_ap_ready <= (input_bucket_5_1_U0_ap_ready or ap_sync_reg_input_bucket_5_1_U0_ap_ready);
    ap_sync_input_bucket_5_2_U0_ap_ready <= (input_bucket_5_2_U0_ap_ready or ap_sync_reg_input_bucket_5_2_U0_ap_ready);
    ap_sync_input_bucket_5_3_U0_ap_ready <= (input_bucket_5_3_U0_ap_ready or ap_sync_reg_input_bucket_5_3_U0_ap_ready);
    ap_sync_ready <= (ap_sync_input_bucket_5_3_U0_ap_ready and ap_sync_input_bucket_5_2_U0_ap_ready and ap_sync_input_bucket_5_1_U0_ap_ready);
    bucket0_address0 <= input_bucket_5_1_U0_bucket_address0;
    bucket0_address1 <= ap_const_lv8_0;
    bucket0_ce0 <= input_bucket_5_1_U0_bucket_ce0;
    bucket0_ce1 <= ap_const_logic_0;
    bucket0_d0 <= input_bucket_5_1_U0_bucket_d0;
    bucket0_d1 <= ap_const_lv32_0;
    bucket0_we0 <= input_bucket_5_1_U0_bucket_we0;
    bucket0_we1 <= ap_const_logic_0;
    bucket1_address0 <= input_bucket_5_2_U0_bucket_address0;
    bucket1_address1 <= ap_const_lv8_0;
    bucket1_ce0 <= input_bucket_5_2_U0_bucket_ce0;
    bucket1_ce1 <= ap_const_logic_0;
    bucket1_d0 <= input_bucket_5_2_U0_bucket_d0;
    bucket1_d1 <= ap_const_lv32_0;
    bucket1_we0 <= input_bucket_5_2_U0_bucket_we0;
    bucket1_we1 <= ap_const_logic_0;
    bucket2_address0 <= input_bucket_5_3_U0_bucket_address0;
    bucket2_address1 <= ap_const_lv8_0;
    bucket2_ce0 <= input_bucket_5_3_U0_bucket_ce0;
    bucket2_ce1 <= ap_const_logic_0;
    bucket2_d0 <= input_bucket_5_3_U0_bucket_d0;
    bucket2_d1 <= ap_const_lv32_0;
    bucket2_we0 <= input_bucket_5_3_U0_bucket_we0;
    bucket2_we1 <= ap_const_logic_0;
    bucket_pointer0_address0 <= input_bucket_5_1_U0_bucket_pointer_address0;
    bucket_pointer0_address1 <= ap_const_lv4_0;
    bucket_pointer0_ce0 <= input_bucket_5_1_U0_bucket_pointer_ce0;
    bucket_pointer0_ce1 <= ap_const_logic_0;
    bucket_pointer0_d0 <= input_bucket_5_1_U0_bucket_pointer_d0;
    bucket_pointer0_d1 <= ap_const_lv32_0;
    bucket_pointer0_we0 <= input_bucket_5_1_U0_bucket_pointer_we0;
    bucket_pointer0_we1 <= ap_const_logic_0;
    bucket_pointer1_address0 <= input_bucket_5_2_U0_bucket_pointer_address0;
    bucket_pointer1_address1 <= ap_const_lv4_0;
    bucket_pointer1_ce0 <= input_bucket_5_2_U0_bucket_pointer_ce0;
    bucket_pointer1_ce1 <= ap_const_logic_0;
    bucket_pointer1_d0 <= input_bucket_5_2_U0_bucket_pointer_d0;
    bucket_pointer1_d1 <= ap_const_lv32_0;
    bucket_pointer1_we0 <= input_bucket_5_2_U0_bucket_pointer_we0;
    bucket_pointer1_we1 <= ap_const_logic_0;
    bucket_pointer2_address0 <= input_bucket_5_3_U0_bucket_pointer_address0;
    bucket_pointer2_address1 <= ap_const_lv4_0;
    bucket_pointer2_ce0 <= input_bucket_5_3_U0_bucket_pointer_ce0;
    bucket_pointer2_ce1 <= ap_const_logic_0;
    bucket_pointer2_d0 <= input_bucket_5_3_U0_bucket_pointer_d0;
    bucket_pointer2_d1 <= ap_const_lv32_0;
    bucket_pointer2_we0 <= input_bucket_5_3_U0_bucket_pointer_we0;
    bucket_pointer2_we1 <= ap_const_logic_0;
    input_bucket_5_1_U0_ap_continue <= ap_sync_continue;
    input_bucket_5_1_U0_ap_start <= ((ap_sync_reg_input_bucket_5_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    input_bucket_5_2_U0_ap_continue <= ap_sync_continue;
    input_bucket_5_2_U0_ap_start <= ((ap_sync_reg_input_bucket_5_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    input_bucket_5_3_U0_ap_continue <= ap_sync_continue;
    input_bucket_5_3_U0_ap_start <= ((ap_sync_reg_input_bucket_5_3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    sorted_data0_address0 <= input_bucket_5_1_U0_sorted_data_address0;
    sorted_data0_address1 <= ap_const_lv4_0;
    sorted_data0_ce0 <= input_bucket_5_1_U0_sorted_data_ce0;
    sorted_data0_ce1 <= ap_const_logic_0;
    sorted_data0_d0 <= ap_const_lv32_0;
    sorted_data0_d1 <= ap_const_lv32_0;
    sorted_data0_we0 <= ap_const_logic_0;
    sorted_data0_we1 <= ap_const_logic_0;
    sorted_data1_address0 <= input_bucket_5_2_U0_sorted_data_address0;
    sorted_data1_address1 <= ap_const_lv4_0;
    sorted_data1_ce0 <= input_bucket_5_2_U0_sorted_data_ce0;
    sorted_data1_ce1 <= ap_const_logic_0;
    sorted_data1_d0 <= ap_const_lv32_0;
    sorted_data1_d1 <= ap_const_lv32_0;
    sorted_data1_we0 <= ap_const_logic_0;
    sorted_data1_we1 <= ap_const_logic_0;
    sorted_data2_address0 <= input_bucket_5_3_U0_sorted_data_address0;
    sorted_data2_address1 <= ap_const_lv4_0;
    sorted_data2_ce0 <= input_bucket_5_3_U0_sorted_data_ce0;
    sorted_data2_ce1 <= ap_const_logic_0;
    sorted_data2_d0 <= ap_const_lv32_0;
    sorted_data2_d1 <= ap_const_lv32_0;
    sorted_data2_we0 <= ap_const_logic_0;
    sorted_data2_we1 <= ap_const_logic_0;
end behav;
