// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module radix_sort_separate_bucket_parallel_5_radix_sort_separate_bucket_parallel_5_Pipeline_inner_loop_initialization (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sorted_data0_address0,
        sorted_data0_ce0,
        sorted_data0_we0,
        sorted_data0_d0,
        sorted_data_address0,
        sorted_data_ce0,
        sorted_data_q0,
        sorted_data1_address0,
        sorted_data1_ce0,
        sorted_data1_we0,
        sorted_data1_d0,
        sorted_data2_address0,
        sorted_data2_ce0,
        sorted_data2_we0,
        sorted_data2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] sorted_data0_address0;
output   sorted_data0_ce0;
output   sorted_data0_we0;
output  [31:0] sorted_data0_d0;
output  [5:0] sorted_data_address0;
output   sorted_data_ce0;
input  [31:0] sorted_data_q0;
output  [3:0] sorted_data1_address0;
output   sorted_data1_ce0;
output   sorted_data1_we0;
output  [31:0] sorted_data1_d0;
output  [3:0] sorted_data2_address0;
output   sorted_data2_ce0;
output   sorted_data2_we0;
output  [31:0] sorted_data2_d0;

reg ap_idle;
reg sorted_data0_ce0;
reg sorted_data0_we0;
reg sorted_data_ce0;
reg sorted_data1_ce0;
reg sorted_data1_we0;
reg sorted_data2_ce0;
reg sorted_data2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln114_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] j_1_cast7_fu_129_p1;
reg   [63:0] j_1_cast7_reg_191;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] empty_fu_134_p1;
reg   [3:0] empty_reg_196;
wire   [0:0] icmp_ln115_fu_138_p2;
reg   [0:0] icmp_ln115_reg_202;
wire   [0:0] icmp_ln118_fu_144_p2;
reg   [0:0] icmp_ln118_reg_211;
wire   [0:0] icmp_ln121_fu_150_p2;
reg   [0:0] icmp_ln121_reg_215;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln122_fu_166_p1;
wire   [63:0] zext_ln119_fu_176_p1;
reg   [5:0] j_fu_50;
wire   [5:0] add_ln114_fu_123_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_1;
wire   [3:0] add_ln122_fu_161_p2;
wire   [3:0] add_ln119_fu_171_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

radix_sort_separate_bucket_parallel_5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln114_fu_117_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln114_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_196 <= empty_fu_134_p1;
        icmp_ln115_reg_202 <= icmp_ln115_fu_138_p2;
        j_1_cast7_reg_191[5 : 0] <= j_1_cast7_fu_129_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_138_p2 == 1'd0) & (icmp_ln114_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln118_reg_211 <= icmp_ln118_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_144_p2 == 1'd0) & (icmp_ln115_fu_138_p2 == 1'd0) & (icmp_ln114_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln121_reg_215 <= icmp_ln121_fu_150_p2;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_117_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data0_ce0 = 1'b1;
    end else begin
        sorted_data0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data0_we0 = 1'b1;
    end else begin
        sorted_data0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data1_ce0 = 1'b1;
    end else begin
        sorted_data1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_211 == 1'd1) & (icmp_ln115_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data1_we0 = 1'b1;
    end else begin
        sorted_data1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data2_ce0 = 1'b1;
    end else begin
        sorted_data2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_215 == 1'd1) & (icmp_ln118_reg_211 == 1'd0) & (icmp_ln115_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data2_we0 = 1'b1;
    end else begin
        sorted_data2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data_ce0 = 1'b1;
    end else begin
        sorted_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_123_p2 = (ap_sig_allocacmp_j_1 + 6'd1);

assign add_ln119_fu_171_p2 = (empty_reg_196 + 4'd6);

assign add_ln122_fu_161_p2 = ($signed(empty_reg_196) + $signed(4'd12));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_134_p1 = ap_sig_allocacmp_j_1[3:0];

assign icmp_ln114_fu_117_p2 = ((ap_sig_allocacmp_j_1 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_138_p2 = ((ap_sig_allocacmp_j_1 < 6'd10) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_144_p2 = ((ap_sig_allocacmp_j_1 < 6'd20) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_150_p2 = ((ap_sig_allocacmp_j_1 < 6'd30) ? 1'b1 : 1'b0);

assign j_1_cast7_fu_129_p1 = ap_sig_allocacmp_j_1;

assign sorted_data0_address0 = j_1_cast7_reg_191;

assign sorted_data0_d0 = sorted_data_q0;

assign sorted_data1_address0 = zext_ln119_fu_176_p1;

assign sorted_data1_d0 = sorted_data_q0;

assign sorted_data2_address0 = zext_ln122_fu_166_p1;

assign sorted_data2_d0 = sorted_data_q0;

assign sorted_data_address0 = j_1_cast7_fu_129_p1;

assign zext_ln119_fu_176_p1 = add_ln119_fu_171_p2;

assign zext_ln122_fu_166_p1 = add_ln122_fu_161_p2;

always @ (posedge ap_clk) begin
    j_1_cast7_reg_191[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //radix_sort_separate_bucket_parallel_5_radix_sort_separate_bucket_parallel_5_Pipeline_inner_loop_initialization
