// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sort_seperate_bucket_sort_seperate_bucket_Pipeline_input_bucket (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sorted_data_address0,
        sorted_data_ce0,
        sorted_data_q0,
        zext_ln25,
        bucket_pointer_address0,
        bucket_pointer_ce0,
        bucket_pointer_we0,
        bucket_pointer_d0,
        bucket_pointer_address1,
        bucket_pointer_ce1,
        bucket_pointer_q1,
        bucket_address0,
        bucket_ce0,
        bucket_we0,
        bucket_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] sorted_data_address0;
output   sorted_data_ce0;
input  [31:0] sorted_data_q0;
input  [4:0] zext_ln25;
output  [3:0] bucket_pointer_address0;
output   bucket_pointer_ce0;
output   bucket_pointer_we0;
output  [31:0] bucket_pointer_d0;
output  [3:0] bucket_pointer_address1;
output   bucket_pointer_ce1;
input  [31:0] bucket_pointer_q1;
output  [9:0] bucket_address0;
output   bucket_ce0;
output   bucket_we0;
output  [31:0] bucket_d0;

reg ap_idle;
reg sorted_data_ce0;
reg bucket_pointer_ce0;
reg bucket_pointer_we0;
reg bucket_pointer_ce1;
reg bucket_ce0;
reg bucket_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln25_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln25_cast_fu_107_p1;
reg   [31:0] zext_ln25_cast_reg_242;
reg   [31:0] sorted_data_load_reg_256;
reg   [31:0] sorted_data_load_reg_256_pp0_iter2_reg;
reg   [31:0] sorted_data_load_reg_256_pp0_iter3_reg;
reg   [3:0] bucket_pointer_addr_reg_266;
wire   [0:0] addr_cmp_fu_172_p2;
reg   [0:0] addr_cmp_reg_272;
wire   [9:0] trunc_ln28_fu_193_p1;
reg   [9:0] trunc_ln28_reg_277;
wire   [63:0] j_1_cast_fu_141_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_fu_160_p1;
wire   [63:0] zext_ln28_2_fu_209_p1;
reg   [63:0] reuse_addr_reg_fu_46;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_50;
wire   [31:0] add_ln29_fu_197_p2;
reg   [5:0] j_fu_54;
wire   [5:0] add_ln25_fu_135_p2;
reg   [5:0] ap_sig_allocacmp_j_1;
wire   [31:0] shifted_fu_151_p2;
wire   [3:0] ith_radix_fu_156_p1;
wire   [31:0] reuse_select_fu_186_p3;
wire   [9:0] grp_fu_213_p3;
wire   [3:0] grp_fu_213_p0;
wire   [5:0] grp_fu_213_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_213_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sort_seperate_bucket_mac_muladd_4ns_6ns_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_4ns_6ns_10ns_10_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .din2(trunc_ln28_reg_277),
    .ce(1'b1),
    .dout(grp_fu_213_p3)
);

sort_seperate_bucket_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln25_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_54 <= add_ln25_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_46 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            reuse_addr_reg_fu_46 <= zext_ln28_fu_160_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            reuse_reg_fu_50 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_50 <= add_ln29_fu_197_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp_reg_272 <= addr_cmp_fu_172_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        bucket_pointer_addr_reg_266 <= zext_ln28_fu_160_p1;
        sorted_data_load_reg_256 <= sorted_data_q0;
        zext_ln25_cast_reg_242[4 : 0] <= zext_ln25_cast_fu_107_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        sorted_data_load_reg_256_pp0_iter2_reg <= sorted_data_load_reg_256;
        sorted_data_load_reg_256_pp0_iter3_reg <= sorted_data_load_reg_256_pp0_iter2_reg;
        trunc_ln28_reg_277 <= trunc_ln28_fu_193_p1;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        bucket_ce0 = 1'b1;
    end else begin
        bucket_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bucket_pointer_ce0 = 1'b1;
    end else begin
        bucket_pointer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_pointer_ce1 = 1'b1;
    end else begin
        bucket_pointer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bucket_pointer_we0 = 1'b1;
    end else begin
        bucket_pointer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        bucket_we0 = 1'b1;
    end else begin
        bucket_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_data_ce0 = 1'b1;
    end else begin
        sorted_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_135_p2 = (ap_sig_allocacmp_j_1 + 6'd1);

assign add_ln29_fu_197_p2 = (reuse_select_fu_186_p3 + 32'd1);

assign addr_cmp_fu_172_p2 = ((reuse_addr_reg_fu_46 == zext_ln28_fu_160_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bucket_address0 = zext_ln28_2_fu_209_p1;

assign bucket_d0 = sorted_data_load_reg_256_pp0_iter3_reg;

assign bucket_pointer_address0 = bucket_pointer_addr_reg_266;

assign bucket_pointer_address1 = zext_ln28_fu_160_p1;

assign bucket_pointer_d0 = (reuse_select_fu_186_p3 + 32'd1);

assign grp_fu_213_p0 = grp_fu_213_p00;

assign grp_fu_213_p00 = ith_radix_fu_156_p1;

assign grp_fu_213_p1 = 10'd49;

assign icmp_ln25_fu_129_p2 = ((ap_sig_allocacmp_j_1 == 6'd49) ? 1'b1 : 1'b0);

assign ith_radix_fu_156_p1 = shifted_fu_151_p2[3:0];

assign j_1_cast_fu_141_p1 = ap_sig_allocacmp_j_1;

assign reuse_select_fu_186_p3 = ((addr_cmp_reg_272[0:0] == 1'b1) ? reuse_reg_fu_50 : bucket_pointer_q1);

assign shifted_fu_151_p2 = $signed(sorted_data_q0) >>> zext_ln25_cast_reg_242;

assign sorted_data_address0 = j_1_cast_fu_141_p1;

assign trunc_ln28_fu_193_p1 = reuse_select_fu_186_p3[9:0];

assign zext_ln25_cast_fu_107_p1 = zext_ln25;

assign zext_ln28_2_fu_209_p1 = grp_fu_213_p3;

assign zext_ln28_fu_160_p1 = ith_radix_fu_156_p1;

always @ (posedge ap_clk) begin
    zext_ln25_cast_reg_242[31:5] <= 27'b000000000000000000000000000;
end

endmodule //sort_seperate_bucket_sort_seperate_bucket_Pipeline_input_bucket
